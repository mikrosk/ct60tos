;CHGRES programme de changement de r‚solution vid‚o
;       avec les r‚solutions ‚tendus de PICDESK 
;       ou les resolutions pour la RADEON pour MagiC

INC EQU ADDQ #1,
DEC EQU SUBQ #1,
MAX_RES EQU 200

PCI_VENDOR_ID_ATI EQU $1002

PCI_CHIP_RV380_3150 EQU $3150
PCI_CHIP_RV380_3151 EQU $3151
PCI_CHIP_RV380_3152 EQU $3152
PCI_CHIP_RV380_3153 EQU $3153
PCI_CHIP_RV380_3154 EQU $3154
PCI_CHIP_RV380_3156 EQU $3156
PCI_CHIP_RV380_3E50 EQU $3E50
PCI_CHIP_RV380_3E51 EQU $3E51
PCI_CHIP_RV380_3E52 EQU $3E52
PCI_CHIP_RV380_3E53 EQU $3E53
PCI_CHIP_RV380_3E54 EQU $3E54
PCI_CHIP_RV380_3E56 EQU $3E56
PCI_CHIP_RS100_4136 EQU $4136
PCI_CHIP_RS200_4137 EQU $4137
PCI_CHIP_R300_AD EQU $4144
PCI_CHIP_R300_AE EQU $4145
PCI_CHIP_R300_AF EQU $4146
PCI_CHIP_R300_AG EQU $4147
PCI_CHIP_R350_AH EQU $4148
PCI_CHIP_R350_AI EQU $4149
PCI_CHIP_R350_AJ EQU $414A
PCI_CHIP_R350_AK EQU $414B
PCI_CHIP_RV350_AP EQU $4150
PCI_CHIP_RV350_AQ EQU $4151
PCI_CHIP_RV360_AR EQU $4152
PCI_CHIP_RV350_AS EQU $4153
PCI_CHIP_RV350_AT EQU $4154
PCI_CHIP_RV350_AV EQU $4156
PCI_CHIP_MACH32 EQU $4158
PCI_CHIP_RS250_4237 EQU $4237
PCI_CHIP_R200_BB EQU $4242
PCI_CHIP_R200_BC EQU $4243
PCI_CHIP_RS100_4336 EQU $4336
PCI_CHIP_RS200_4337 EQU $4337
PCI_CHIP_MACH64CT EQU $4354
PCI_CHIP_MACH64CX EQU $4358
PCI_CHIP_RS250_4437 EQU $4437
PCI_CHIP_MACH64ET EQU $4554
PCI_CHIP_MACH64GB EQU $4742
PCI_CHIP_MACH64GD EQU $4744
PCI_CHIP_MACH64GI EQU $4749
PCI_CHIP_MACH64GL EQU $474C
PCI_CHIP_MACH64GM EQU $474D
PCI_CHIP_MACH64GN EQU $474E
PCI_CHIP_MACH64GO EQU $474F
PCI_CHIP_MACH64GP EQU $4750
PCI_CHIP_MACH64GQ EQU $4751
PCI_CHIP_MACH64GR EQU $4752
PCI_CHIP_MACH64GS EQU $4753
PCI_CHIP_MACH64GT EQU $4754
PCI_CHIP_MACH64GU EQU $4755
PCI_CHIP_MACH64GV EQU $4756
PCI_CHIP_MACH64GW EQU $4757
PCI_CHIP_MACH64GX EQU $4758
PCI_CHIP_MACH64GY EQU $4759
PCI_CHIP_MACH64GZ EQU $475A
PCI_CHIP_RV250_Id EQU $4964
PCI_CHIP_RV250_Ie EQU $4965
PCI_CHIP_RV250_If EQU $4966
PCI_CHIP_RV250_Ig EQU $4967
PCI_CHIP_R420_JH EQU $4A48
PCI_CHIP_R420_JI EQU $4A49
PCI_CHIP_R420_JJ EQU $4A4A
PCI_CHIP_R420_JK EQU $4A4B
PCI_CHIP_R420_JL EQU $4A4C
PCI_CHIP_R420_JM EQU $4A4D
PCI_CHIP_R420_JN EQU $4A4E
PCI_CHIP_R420_JP EQU $4A50
PCI_CHIP_MACH64LB EQU $4C42
PCI_CHIP_MACH64LD EQU $4C44
PCI_CHIP_RAGE128LE EQU $4C45
PCI_CHIP_RAGE128LF EQU $4C46
PCI_CHIP_MACH64LG EQU $4C47
PCI_CHIP_MACH64LI EQU $4C49
PCI_CHIP_MACH64LM EQU $4C4D
PCI_CHIP_MACH64LN EQU $4C4E
PCI_CHIP_MACH64LP EQU $4C50
PCI_CHIP_MACH64LQ EQU $4C51
PCI_CHIP_MACH64LR EQU $4C52
PCI_CHIP_MACH64LS EQU $4C53
PCI_CHIP_MACH64LT EQU $4C54
PCI_CHIP_RADEON_LW EQU $4C57
PCI_CHIP_RADEON_LX EQU $4C58
PCI_CHIP_RADEON_LY EQU $4C59
PCI_CHIP_RADEON_LZ EQU $4C5A
PCI_CHIP_RV250_Ld EQU $4C64
PCI_CHIP_RV250_Le EQU $4C65
PCI_CHIP_RV250_Lf EQU $4C66
PCI_CHIP_RV250_Lg EQU $4C67
PCI_CHIP_RV250_Ln EQU $4C6E
PCI_CHIP_RAGE128MF EQU $4D46
PCI_CHIP_RAGE128ML EQU $4D4C
PCI_CHIP_R300_ND EQU $4E44
PCI_CHIP_R300_NE EQU $4E45
PCI_CHIP_R300_NF EQU $4E46
PCI_CHIP_R300_NG EQU $4E47
PCI_CHIP_R350_NH EQU $4E48  
PCI_CHIP_R350_NI EQU $4E49  
PCI_CHIP_R360_NJ EQU $4E4A  
PCI_CHIP_R350_NK EQU $4E4B  
PCI_CHIP_RV350_NP EQU $4E50
PCI_CHIP_RV350_NQ EQU $4E51
PCI_CHIP_RV350_NR EQU $4E52
PCI_CHIP_RV350_NS EQU $4E53
PCI_CHIP_RV350_NT EQU $4E54
PCI_CHIP_RV350_NV EQU $4E56
PCI_CHIP_RAGE128PA EQU $5041
PCI_CHIP_RAGE128PB EQU $5042
PCI_CHIP_RAGE128PC EQU $5043
PCI_CHIP_RAGE128PD EQU $5044
PCI_CHIP_RAGE128PE EQU $5045
PCI_CHIP_RAGE128PF EQU $5046
PCI_CHIP_RAGE128PG EQU $5047
PCI_CHIP_RAGE128PH EQU $5048
PCI_CHIP_RAGE128PI EQU $5049
PCI_CHIP_RAGE128PJ EQU $504A
PCI_CHIP_RAGE128PK EQU $504B
PCI_CHIP_RAGE128PL EQU $504C
PCI_CHIP_RAGE128PM EQU $504D
PCI_CHIP_RAGE128PN EQU $504E
PCI_CHIP_RAGE128PO EQU $504F
PCI_CHIP_RAGE128PP EQU $5050
PCI_CHIP_RAGE128PQ EQU $5051
PCI_CHIP_RAGE128PR EQU $5052
PCI_CHIP_RAGE128PS EQU $5053
PCI_CHIP_RAGE128PT EQU $5054
PCI_CHIP_RAGE128PU EQU $5055
PCI_CHIP_RAGE128PV EQU $5056
PCI_CHIP_RAGE128PW EQU $5057
PCI_CHIP_RAGE128PX EQU $5058
PCI_CHIP_RADEON_QD EQU $5144
PCI_CHIP_RADEON_QE EQU $5145
PCI_CHIP_RADEON_QF EQU $5146
PCI_CHIP_RADEON_QG EQU $5147
PCI_CHIP_R200_QH EQU $5148
PCI_CHIP_R200_QI EQU $5149
PCI_CHIP_R200_QJ EQU $514A
PCI_CHIP_R200_QK EQU $514B
PCI_CHIP_R200_QL EQU $514C
PCI_CHIP_R200_QM EQU $514D
PCI_CHIP_R200_QN EQU $514E
PCI_CHIP_R200_QO EQU $514F
PCI_CHIP_RV200_QW EQU $5157
PCI_CHIP_RV200_QX EQU $5158
PCI_CHIP_RV100_QY EQU $5159
PCI_CHIP_RV100_QZ EQU $515A
PCI_CHIP_RAGE128RE EQU $5245
PCI_CHIP_RAGE128RF EQU $5246
PCI_CHIP_RAGE128RG EQU $5247
PCI_CHIP_RAGE128RK EQU $524B
PCI_CHIP_RAGE128RL EQU $524C
PCI_CHIP_RAGE128SE EQU $5345
PCI_CHIP_RAGE128SF EQU $5346
PCI_CHIP_RAGE128SG EQU $5347
PCI_CHIP_RAGE128SH EQU $5348
PCI_CHIP_RAGE128SK EQU $534B
PCI_CHIP_RAGE128SL EQU $534C
PCI_CHIP_RAGE128SM EQU $534D
PCI_CHIP_RAGE128SN EQU $534E
PCI_CHIP_RAGE128TF EQU $5446
PCI_CHIP_RAGE128TL EQU $544C
PCI_CHIP_RAGE128TR EQU $5452
PCI_CHIP_RAGE128TS EQU $5453
PCI_CHIP_RAGE128TT EQU $5454
PCI_CHIP_RAGE128TU EQU $5455
PCI_CHIP_RV370_5460 EQU $5460
PCI_CHIP_RV370_5461 EQU $5461
PCI_CHIP_RV370_5462 EQU $5462
PCI_CHIP_RV370_5463 EQU $5463
PCI_CHIP_RV370_5464 EQU $5464
PCI_CHIP_RV370_5465 EQU $5465
PCI_CHIP_RV370_5466 EQU $5466
PCI_CHIP_RV370_5467 EQU $5467
PCI_CHIP_R423_UH EQU $5548
PCI_CHIP_R423_UI EQU $5549
PCI_CHIP_R423_UJ EQU $554A
PCI_CHIP_R423_UK EQU $554B
PCI_CHIP_R423_UQ EQU $5551
PCI_CHIP_R423_UR EQU $5552
PCI_CHIP_R423_UT EQU $5554
PCI_CHIP_MACH64VT EQU $5654
PCI_CHIP_MACH64VU EQU $5655
PCI_CHIP_MACH64VV EQU $5656
PCI_CHIP_RS300_5834 EQU $5834
PCI_CHIP_RS300_5835 EQU $5835
PCI_CHIP_RS300_5836 EQU $5836
PCI_CHIP_RS300_5837 EQU $5837
PCI_CHIP_RV370_5B60 EQU $5B60
PCI_CHIP_RV370_5B61 EQU $5B61
PCI_CHIP_RV370_5B62 EQU $5B62
PCI_CHIP_RV370_5B63 EQU $5B63
PCI_CHIP_RV370_5B64 EQU $5B64
PCI_CHIP_RV370_5B65 EQU $5B65
PCI_CHIP_RV370_5B66 EQU $5B66
PCI_CHIP_RV370_5B67 EQU $5B67
PCI_CHIP_RV280_5960 EQU $5960
PCI_CHIP_RV280_5961 EQU $5961
PCI_CHIP_RV280_5962 EQU $5962
PCI_CHIP_RV280_5964 EQU $5964
PCI_CHIP_RV280_5C61 EQU $5C61
PCI_CHIP_RV280_5C63 EQU $5C63
PCI_CHIP_R423_5D57  EQU $5D57
PCI_CHIP_RS350_7834 EQU $7834
PCI_CHIP_RS350_7835 EQU $7835

BOXVIDEO  EQU 0  ;BOX dans l'arbre CHOIXVIDEO
BICONERES EQU 1  ;USERDEF
BCOUL     EQU 3  ;BUTTON
BOXRES    EQU 4  ;BOX
RES1      EQU 5  ;TEXT
RES2      EQU 6  ;TEXT
RES3      EQU 7  ;TEXT
RES4      EQU 8  ;TEXT
RES5      EQU 9  ;TEXT
RES6      EQU 10 ;TEXT
RES7      EQU 11 ;TEXT
RES8      EQU 12 ;TEXT
RES9      EQU 13 ;TEXT
RES10     EQU 14 ;TEXT
BHAUT     EQU 15 ;BOXCHAR
SLIDER    EQU 16 ;BOX
BSLIDER   EQU 17 ;BOX
BBAS      EQU 18 ;BOXCHAR
BSAUVER   EQU 19 ;BUTTON
BOK       EQU 20 ;BUTTON
BABANDON  EQU 21 ;BUTTON
INFORES   EQU 22 ;TEXT
BTEST     EQU 23 ;BUTTON

;modecode
BPS1 EQU 0
BTS2 EQU 1
BPS4 EQU 2
BPS8 EQU 3
BPS16 EQU 4
BPS32 EQU 5
NUMCOLS EQU 7;masque
COL80 EQU 3
VGA_FALCON EQU 4
PAL EQU 5
OVERSCAN EQU 6
STMODES EQU 7
VERTFLAG EQU 8
;flags suppl‚mentaires g‚r‚s par PICDESK
HORFLAG EQU 9;double largeur (TV)
HORFLAG2 EQU 10;largeur augment‚e (TV, VGA ou MONO SM1xx)
VESA_FALCON EQU 11;SVGA 608 lignes                |1024 * 768 entrelac‚
ULTRA_VGA_FALCON EQU 12;SVGA 768 lignes entrelac‚s|
;ATI RAdeon
VESA_600 EQU 11
VESA_768 EQU 12
VERTFLAG2 EQU 13
DEVID EQU 14;bits 11-3 <=> devID
VIRTUAL_SCREEN EQU 15; largeur * 2 et hauteur * 2, 2048 x 2048 max

;Vsetscreen New modes
CMD_GETMODE   EQU 0
CMD_SETMODE   EQU 1
CMD_GETINFO   EQU 2
CMD_ALLOCPAGE EQU 3
CMD_FREEPAGE  EQU 4
CMD_FLIPPAGE  EQU 5
CMD_ALLOCMEM  EQU 6
CMD_FREEMEM   EQU 7
CMD_SETADR    EQU 8
CMD_ENUMMODES EQU 9
CMD_TESTMODE  EQU 10
CMD_COPYPAGE  EQU 11

_BOOTDEV EQU $446
_HZ_200 EQU $4BA
_COOKIE EQU $5A0

;<structure PICDESK (pointeur donn‚e cookie-jar PICD)>
;<info fichier en m‚moire et motif (adresse dans cookie) de 64 octets>
;ID:"_IMG", ou "_GEM"
;mot long taille fichier
;mot long taille maximale du fichier
;adresse arbre objet bureau
;mot mode 0:image 1:motif
;mot trame motif
;mot couleur motif
;mot modecode falcon du fichier NEWDESK.INF puis modecode courant aprŠs V_OPNWK
;mot largeur de l'‚cran
;mot hauteur de l'‚cran
;mot flag inversion image monochrome
;mot flag conserver couleurs
;mot flag index couleurs VDI
;mot modecode au V_OPNWK
;adresse tableau liste r‚solutions pour CPX
;mot version programme TSR
;mot tri selecteur: sans (0) nom (1) type (2) date (3) taille (4)
;mot selecteur: sans (0) ou avec (1)
;adresse buffer fichier
;mot centrage image IMG: automatique (0) centrage (1) carreaux (2)
;fonction test
;1 mots r‚serve
;mot identificateur application bureau
;mot version AES
;nbre d'applications disponibles (<>1:multitƒche)

;<structure liste r‚solutions>
;mot moniteur: 0:monochrome (0) (S)VGA (2) TV (3)
;mot modecode;
;mot largeur ecran;
;mot hauteur_ecran;
;mot long taille_ecran en octets
;mot long p‚riode trame en nS
;mot long p‚riode balayage horizontal en nS * 100
;mot long p‚riode horloge vid‚o en nS * 100

 ILABEL C:\PROFIMAT\TOS\TOS.Q

;d‚but du programme

 MOVE.L 4(SP),A5;d‚but de la basepage
 MOVE.L $C(A5),D0
 ADD.L $14(A5),D0
 ADD.L $1C(A5),D0
 ADD.L #5000,D0;pour la pile et la basepage
 ANDI.B #$FE,D0
 LEA -104(A5,D0.L),SP
 SETBLOCK D0,(A5)
 SUPEXEC LECTEUR_BOOT
 ADD.B #"A",D0
 MOVE.B D0,MAGX_INF
 LINK A6,#-16
 MOVEQ #-1,D7;flag erreur
 MOVE.L SP,A0
 LEA VDIPB+20,A7
 PEA PTSOUT
 PEA INTOUT
 PEA PTSIN
 PEA INTIN
 PEA CONTRL
 PEA ADDROUT
 PEA ADDRIN
 PEA INTOUT
 PEA INTIN
 PEA GLOBAL
 PEA CONTRL
 PEA VDIPB
 PEA AESPB
 MOVE.L A0,SP
 APPL_INIT AP_ID
 GRAF_HANDLE GR_HANDLE
 MOVE GR_HANDLE,HANDLE
 V_OPNVWK WORK_IN,HANDLE,WORK_OUT
 GRAF_MOUSE #0,0,D0;flŠche
 CLR D_FRA
 MOVE.L #"_AKP",D0
 BSR GET_COOKIE
 BMI.S \5;erreur
 LSR #8,D0;langue
 CMP.B #2,D0;FRA
 BEQ.S \4
 CMP.B #7,D0;SWF
 BNE.S \5
\4:ST.B D_FRA
\5:CLR D_ATI
 BSR INIT_TYPE_VIDEO
 RSRC_LOAD NOM_RSC,D0
 TST D0
 BEQ \3
 BSR INIT_RSC
 BSR CHOIX_VIDEO
 BEQ \2
 CMP #3,VIDEO;FALCON
 BNE.S \1
 MOVE.L #"PICD",D0
 BSR GET_COOKIE
 BMI.S \1;pas trouv‚
 MOVE.L D0,A0
 MOVE MODECODE,22(A0)
\1:MOVEQ #5,D1
 LEA -15(A6),A0
 MOVEQ #0,D0
 MOVE REZ,D0
 BSR CONV_DECI_DIAL;code changement r‚solution vid‚o
 MOVE.B #" ",(A0)+
 MOVE.B #"0",(A0)+
 MOVE.B #" ",(A0)+
 MOVEQ #5,D1
 MOVEQ #0,D0
 MOVE MODECODE,D0
 TST D_ATI
 BNE.S \6
 AND #$1FF,D0
\6:BSR CONV_DECI_DIAL
 LEA -15(A6),A0
 BSR LONGUEUR_CHAINE
 MOVE.B D0,-16(A6)
 SHEL_WRITE #1,#1,#1,SHUTDOWN,-16(A6),D0
\2:RSRC_FREE D0
 MOVEQ #0,D7;OK
\3:V_CLSVWK HANDLE
 APPL_EXIT D0
 UNLK A6
 TERM_2 D7
 ILLEGAL
 RTS
 
PHYSBASE_VIDEL:

 MOVEQ #0,D0
 MOVE.B $FFFF8201,D0
 ASL.L #8,D0
 MOVE.B $FFFF8203,D0
 ASL.L #8,D0
 MOVE.B $FFFF820D,D0
 RTS

ENUMFUNC:
 
 MOVEM.L D1-D2/A0-A3,-(SP)
 MOVE.L 4+24(SP),A1;liste SCREENINFO
 MOVE.L 4(A1),D1;devID
 BTST #DEVID,D1
 BEQ \2
 MOVEQ #NUMCOLS,D0
 AND.L D1,D0;devID
 CMP PLANS,D0
 BNE.S \2
 LEA TAB_LISTE_RES_PICDESK,A2
 MOVE NB_RES,D0
 MULU #20,D0
 ADD.L D0,A2
 LEA TEXTES_RES_PICDESK,A3
 MOVE NB_RES,D0
 MULU #36,D0
 ADD.L D0,A3
 CLR 4(A2)
 MOVE.L A3,6(A2);texte descriptif r‚solution vid‚o
 MOVE #5,10(A2);res FALCON
 MOVE D1,12(A2);modecode
 MOVEM.L 80(A1),D0-D1;scrHeight,scrWidth
 MOVE D1,14(A2);largeur
 MOVE D0,16(A2);hauteur
; MOVEM.L 88(A1),D0-D1;virtHeight,virtWidth
 MOVE.L 164(A1),D0;refresh
 MOVE D0,18(A2)
 LEA 8(A1),A0;name
 MOVEQ #34,D0
\3:MOVE.B (A0)+,(A3)+
 DBEQ D0,\3
 BEQ.S \4
 CLR.B (A3)
\4:LEA 20(A2),A2
 MOVE.L A2,-20(A2);pointeur descriptif suivant
 INC NB_RES
 MOVE NB_RES,D0
 CMP #MAX_RES-1,D0
 BCS.S \2
 MOVEQ #0,D0
 BRA.S \1
\2:MOVEQ #1,D0
\1:MOVEM.L (SP)+,D1-D2/A0-A3
 RTS

INIT_LISTE_RES:

 MOVEM.L D0-A5,-(SP)
 LEA 32,A4;MHz
 MOVE.L #"_FRQ",D0
 BSR GET_COOKIE
 BMI.S \44;pas trouv‚
 MOVE.L D0,A4
\44:TST D_FRA
 BNE \43
 LEA RES_ST_HAUTE_E,A0
 MOVE.L A0,TAB_LISTE_RES_ST_2+6
 MOVE.L A0,TAB_LISTE_RES_VGA_TT_2+6
 MOVE.L A0,TAB_LISTE_RES_VGA_FALCON_2+6+20
 MOVE.L A0,TAB_LISTE_RES_MONO_FALCON+6
 MOVE.L A0,TAB_LISTE_RES_TV_FALCON_2+6+20
 LEA RES_ST_MOYENNE_E,A0
 MOVE.L A0,TAB_LISTE_RES_ST_4+6
 MOVE.L A0,TAB_LISTE_RES_VGA_TT_4+6
 MOVE.L A0,TAB_LISTE_RES_VGA_FALCON_4+6+20+20
 MOVE.L A0,TAB_LISTE_RES_TV_FALCON_4+6+(4*20)
 LEA RES_ST_BASSE_E,A0
 MOVE.L A0,TAB_LISTE_RES_ST_16+6
 MOVE.L A0,TAB_LISTE_RES_VGA_TT_16+6
 MOVE.L A0,TAB_LISTE_RES_VGA_FALCON_16+6
 MOVE.L A0,TAB_LISTE_RES_TV_FALCON_16+6
 LEA RES_TT_HAUTE_E,A0
 MOVE.L A0,TAB_LISTE_RES_MONO_TT_2+6
 LEA RES_TT_MOYENNE_E,A0
 MOVE.L A0,TAB_LISTE_RES_VGA_TT_16+6+20
 LEA RES_TT_BASSE_E,A0
 MOVE.L A0,TAB_LISTE_RES_VGA_TT_256+6
\43:CMP #3,VIDEO;FALCON
 BNE \12
 TST D_ATI
 BNE \51 
 MOVE.L #"_PCI",D0
 BSR GET_COOKIE
 BMI \48;pas trouv‚
 MOVE.L D0,A3
 PHYSBASE
 CMP.L #$1000000,D0
 BCC.S \49
 MOVE.L D0,-(SP)
 SUPEXEC PHYSBASE_VIDEL
 CMP.L (SP)+,D0
 BEQ \48;usage du Videl
\49:SUPER 0
 MOVE.L D0,A5;sauve SSP
 LEA 8(A3),A3;base des fonctions PCI
 MOVEQ #0,D3;index
\46:MOVE.L #$0000FFFF,D0;ID
  MOVE.L D3,D1;index
  ADDQ.L #1,D3
  MOVE.L (A3),A1
  JSR (A1);find_pci_device
  TST.L D0;handle
  BMI \50;pas trouv‚
  MOVEQ #0,D1;PCIIDR
  CLR.L -(SP)
  MOVE.L SP,A0;data
  MOVE.L 16(A3),A1
  JSR (A1);read_config_longword
  MOVE.L (SP)+,D1;data PCIIDR
  TST.L D0
  BMI.S \46;erreur
  CMP #PCI_VENDOR_ID_ATI,D1;vendor
  BNE.S \46
  SWAP D1;device
  LEA TAB_ATI_DEVICES,A0
\47:TST (A0)
  BEQ.S \46;fin tableau
 CMP (A0)+,D1
 BNE.S \47
;Radeon trouv‚e
 ST.B D_ATI
 SUPER (A5)
\51:CLR NB_RES
 VSETSCREEN #CMD_ENUMMODES,#$564E,ENUMFUNC,-1; 0x564E 'VN' (Vsetscreen New)
 MOVEQ #0,D0
 MOVE NB_RES,D0
 BEQ.S \52
 DEC D0
 MULU #20,D0
\52:LEA TAB_LISTE_RES_PICDESK,A0
 CLR.L (A0,D0.L);fin de tableau
 CLR 10(A0,D0.L)
 TST NB_RES
 BNE \53;tri
 BRA \4
\50:SUPER (A5)
\48:MOVE.L #"PICD",D0
 BSR GET_COOKIE
 BMI \12
 MOVE.L D0,A0
 CMP #$200,40(A0);version
 BCS \12
 MOVE.L 36(A0),A1;liste r‚solutions
 LEA TAB_LISTE_RES_PICDESK,A2
 LEA TEXTES_RES_PICDESK,A3
 MOVEQ #0,D2
 BSET #PAL,D2
 MOVE #MAX_RES-2,D6
 MOVE MONITEUR,D7
 CMP #1,D7;couleur
 BNE.S \8
 MOVEQ #3,D7;TV
\8:MOVE (A1),D0;moniteur: 0:monochrome (0) (S)VGA (2) TV (3)
  BMI \13;fin de tableau
  CMP #1,D0
  BNE.S \15
  MOVEQ #3,D0
\15:CMP D7,D0
  BNE \14
  CMP #3,D0;TV ou moniteur couleur
  BNE.S \16
  MOVE 2(A1),D0;modecode
  MOVE MODECODE,D1
  AND D2,D0;flag PAL
  AND D2,D1
  CMP D1,D0
  BNE \14
\16:MOVE PLANS,D0;nbre de bits par plan
  CMP #BPS1,D0
  BNE.S \26
  CMP #600,4(A1);largeur
  BCS \14;pas de 2 couleurs en 40 & 60 colonnes TV
;         et en VGA 40, 48, 56  & 64 colonnes
  BRA.S \27
\26:CMP #BPS16,D0
  BNE.S \27
  CMP #3,D7;moniteur couleur ou TV
  BNE.S \28
  CMP #900,4(A1);largeur
  BHI \14;pas de NTC en 120 & 160 colonnes TV
  BRA.S \27
\28:CMP #2,D7;VGA
  BNE.S \27
  CMP #600,4(A1);largeur
  BHI \14; pas de NTC en VGA 80, 96, 112 & 128 colonnes
\27:CLR.L (A2)
  CLR 4(A2)
  MOVE.L A3,6(A2);texte descriptif r‚solution vid‚o
  MOVE #5,10(A2);rez
  MOVE 2(A1),D0;modecode
  AND #~NUMCOLS,D0
  OR PLANS,D0
  MOVE D0,12(A2);modecode
  MOVE.L 4(A1),14(A2);largeur, hauteur
  MOVE.L A3,A0
  MOVEQ #4,D1
  MOVEQ #0,D0
  MOVE 4(A1),D0;largeur
  BSR CONV_DECI
  MOVE #" *",4(A3)
  LEA 6(A3),A0
  MOVEQ #4,D1
  MOVEQ #0,D0
  MOVE 6(A1),D0;hauteur
  BSR CONV_DECI
  MOVE.B #",",10(A3)
  MOVE.L 12(A1),D0;p‚riode trame en nS
  MOVEQ #10,D1
  BSR DIV32
  MOVE.L D0,D1
  MOVE.L #1000000000,D0
  MOVE.L D1,D2
  LSR.L #1,D2
  BSR DIV32_32S
  CMP.L D2,D1
  BCS.S \34
  ADDQ.L #1,D0
\34:LEA 11(A3),A0
  MOVEQ #4,D1
  BSR CONV_DECI
  MOVE.B 3(A0),4(A0)
  MOVE.B #",",3(A0)
  MOVE #" H",16(A3)
  MOVE.B #"z",18(A3)
  MOVE.L #1000000000,D0
  MOVE.L 16(A1),D1;p‚riode ligne en nS * 100
  MOVE.L D1,D2
  LSR.L #1,D2
  BSR DIV32_32S
  CMP.L D2,D1
  BCS.S \35
  ADDQ.L #1,D0
\35:LEA 19(A3),A0
  MOVEQ #4,D1
  BSR CONV_DECI
  MOVE.B 3(A0),4(A0)
  MOVE.B #",",3(A0)
  MOVE #" K",24(A3)
  MOVE #"Hz",26(A3)
  CLR.B 28(A3)
  MOVE 12(A2),D0;modecode
  BTST #VGA_FALCON,D0
  BEQ.S \32
  BTST #ULTRA_VGA_FALCON,D0
  BNE.S \31
  MOVE #" V",28(A3)
  BTST #VESA_FALCON,D0
  BNE.S \30
  MOVE #"GA",30(A3)
  CLR.B 32(A3)
  BRA.S \29
\30:MOVE #"ES",30(A3)
  MOVE.B #"A",32(A3)
  CLR.B 33(A3)
  BRA.S \29
\31:BTST #VERTFLAG,D0
  BNE.S \29
  BRA.S \33;VGA entrelac‚
\32:BTST #VERTFLAG,D0
  BEQ.S \29
\33:CLR 28(A3)
  CMP.L #50,A4;Centurbo II ou CT60 … 50 MHz
  BCS.S \45
  CMP.L #2000,20(A1);p‚riode horloge vid‚o en nS * 100, >=50 MHz
  BLS.S \29;non entrelac‚
\45:CLR.B 35(A3)
  TST D_FRA
  BEQ.S \39
  MOVE #" e",28(A3)
  MOVE.L #"ntre",30(A3)
  MOVE.B #"l",34(A3)
  BRA.S \29
\39:MOVE #" i",28(A3)
  MOVE.L #"nter",30(A3)
  MOVE.B #"l",34(A3)
\29:LEA 20(A2),A2
  LEA 36(A3),A3
  DEC D6
  BMI.S \13
\14:LEA 24(A1),A1
 BRA \8
;ajoute modes ST
\13:CMP #2,MONITEUR;VGA
 BNE.S \36
 CMP #4,PLANS;NTC
 BNE.S \36
 CMP.L #40,A4;Speed Resolution Card … 40 MHz
 BCS.S \36
 CMP.L #50,A4;Centurbo II ou CT60 … 50 MHz
 BCC.S \38
 MOVE.L #RES_ST_NTC,6(A2)
 BRA.S \37
\38:MOVE.L #RES_ST_NTC_CT2,6(A2)
\37:MOVE #$94,12(A2);modecode
 MOVE #640,14(A2);largeur
 MOVE #400,16(A2);hauteur
 BRA \9
\36:TST MONITEUR;monochrome
 BEQ \17
 MOVE PLANS,D0;2 couleurs
 BNE.S \18
 MOVE.L #RES_ST_HAUTE,6(A2)
 TST D_FRA
 BNE.S \40
 MOVE.L #RES_ST_HAUTE_E,6(A2)
\40:MOVE #$98,12(A2);modecode
 MOVE #640,14(A2);largeur ST HAUTE
 MOVE #400,16(A2);hauteur ST HAUTE
 BRA.S \9
\18:CMP #1,D0;4 couleurs
 BNE.S \10
 MOVE.L #RES_ST_MOYENNE,6(A2)
 TST D_FRA
 BNE.S \41
 MOVE.L #RES_ST_MOYENNE_E,6(A2) 
\41:MOVE #$199,12(A2);modecode
 MOVE #640,14(A2);largeur ST MOYENNE
 BRA.S \11
\10:CMP #2,D0;16 couleurs
 BNE.S \17
 MOVE.L #RES_ST_BASSE,6(A2)
 TST D_FRA
 BNE.S \42
 MOVE.L #RES_ST_BASSE_E,6(A2)
\42:MOVE #$192,12(A2);modecode
 MOVE #320,14(A2);largeur ST BASSE
\11:MOVE #200,16(A2);hauteur ST BASSE et ST MOYENNE
\9:CLR.L (A2)
 CLR 4(A2)
 MOVE #5,10(A2);rez
 LEA 20(A2),A2
\17:CLR 10(A2);fin de tableau
;tri ordre croissant listes r‚solutions
\53:LEA TAB_LISTE_RES_PICDESK,A2
\22:TST 10(A2)
  BEQ.S \21
  LEA TAB_LISTE_RES_PICDESK,A3
\20:TST 10(A3)
   BEQ.S \19
   MOVE 14(A2),D2;largeur
   MULU 16(A2),D2;hauteur
   MOVE 14(A3),D3;largeur
   MULU 16(A3),D3;hauteur
   CMP.L D3,D2
   BHI.S \23
   BNE.S \54
   TST D_ATI
   BEQ.S \54
   MOVE 18(A2),D2;refresh
   CMP 18(A3),D2;refresh
   BCC.S \23
\54:MOVE.L 6(A2),D0;texte
   MOVE.L 6(A3),6(A2)
   MOVE.L D0,6(A3)
   MOVE.L 10(A2),D0;rez, modecode
   MOVE.L 10(A3),10(A2)
   MOVE.L D0,10(A3)
   MOVE.L 14(A2),D0;largeur, hauteur
   MOVE.L 14(A3),14(A2)
   MOVE.L D0,14(A3)
   MOVE 18(A2),D0;refresh
   MOVE 18(A3),18(A2)
   MOVE D0,18(A3)
\23:LEA 20(A3),A3
  BRA.S \20
\19:LEA 20(A2),A2
 BRA.S \22
\21:LEA TAB_LISTE_RES_PICDESK,A2
\24:TST 10(A2);rez
  BEQ.S \25
  LEA 20(A2),A2
  MOVE.L A2,-20(A2);pointeur descriptif suivant
 BRA.S \24
\25:CLR.L -20(A2);fin de tableau
 LEA TAB_LISTE_RES_PICDESK,A0
 BRA.S \4
;PICDESK non trouv‚ ou machine <> FALCON => r‚solutions machine
\12:MOVE MONITEUR,D2;type moniteur dans D2: 0:monochrome  1:couleur  2:VGA
 MOVE PLANS,D1;nbre bits par plans dans D1: 0:2  1:4  2:16  3:256  4:65536 5:16M
 MOVE VIDEO,D0;type contr“leur vid‚o dans D0: 0:ST  1:STE  2:TT  3:FALCON
 SUB.L A0,A0
 ASL #2,D1
 CMP #2,D0
 BCS.S \1;ST(E)
 BEQ.S \2;TT
 CMP #3,D0
 BEQ.S \3;FALCON
 BRA.S \4
;ST(E)
\1:LEA TAB_COUL_LISTE_RES_ST,A0
 MOVE.L (A0,D1),A0
 BRA.S \4
;TT
\2:TST D2
 BNE.S \5
 LEA TAB_LISTE_RES_MONO_TT_2,A0
 BRA.S \4
\5:LEA TAB_COUL_LISTE_RES_VGA_TT,A0
 MOVE.L (A0,D1),A0
 BRA.S \4
;FALCON
\3:CMP #2,D2;VGA
 BNE.S \6
 LEA TAB_COUL_LISTE_RES_VGA_FALCON,A0
 MOVE.L (A0,D1),A0
 BRA.S \4
\6:TST D2;monochrome
 BNE.S \7
 LEA TAB_LISTE_RES_MONO_FALCON,A0
 BRA.S \4
\7:LEA TAB_COUL_LISTE_RES_TV_FALCON,A0
 MOVE.L (A0,D1),A0
\4:MOVE.L A0,LISTE_RES
 MOVEM.L (SP)+,D0-A5
 RTS

SELECT_LISTE_RES:

 MOVEM.L A0-A3,-(SP)
 MOVE.L 24(SP),A2;arbre
 MOVE.L 28(SP),A1;liste resolutions
 MOVE 32(SP),D0;objet
 MULU #24,D0
 MOVE.L 12(A2,D0.L),A0;OB_SPEC
 MOVE.L (A0),A3
 TST.L 28(SP)
 BEQ.S \3
 TST 4(A1);flag selected
 BEQ.S \7
 OR #SELECTED,10(A2,D0.L);OB_STATE
 BRA.S \6
\7:AND #~SELECTED,10(A2,D0.L);OB_STATE
\6:MOVE.L 6(A1),A0;chaŒne descriptif r‚solution
 TST.B (A3)
 BEQ.S \5
 MOVE.B #" ",(A3)+
 BRA.S \5
\4:MOVE.B (A0)+,(A3)+
\5:TST.B (A3)
  BEQ.S \1
 TST.B (A0)
 BNE.S \4
 BRA.S \1
\3:AND #~SELECTED,10(A2,D0.L);OB_STATE
 BRA.S \1
\2:MOVE.B #" ",(A3)+
\1:TST.B (A3)
 BNE.S \2
 MOVEQ #0,D0
 MOVE 32(SP),D0;objet
 MOVEM.L (SP)+,A0-A3
 RTS

CLIC_RES:

 MOVEM.L D0/A0,-(SP)
 TST REZ
 BNE.S \1;r‚solution cliqu‚e
 MOVE.L 16(SP),A0;arbre objet
 AND #~DISABLED,BOK*24+10(A0);OB_STATE
 OR #SELECTABLE+DEFAULT,BOK*24+8(A0);OB_FLAGS
 AND #~DISABLED,BSAUVER*24+10(A0);OB_STATE
 OR #SELECTABLE,BSAUVER*24+8(A0);OB_FLAGS
 OR #DISABLED,BTEST*24+10(A0);OB_STATE
 AND #~SELECTABLE,BTEST*24+8(A0);OB_FLAGS
 CMP #3,VIDEO;FALCON
 BNE.S \2
 TST D_ATI
 BNE.S \3
 MOVE.L #"PICD",D0
 BSR GET_COOKIE
 BMI.S \2
 MOVE.L A0,-(SP)
 MOVE.L D0,A0
 CMP #$204,40(A0);version
 MOVE.L (SP)+,A0
 BCS.S \2
\3:AND #~DISABLED,BTEST*24+10(A0);OB_STATE
 OR #SELECTABLE,BTEST*24+8(A0);OB_FLAGS
\2:MOVEQ #BOK,D0
 MOVE.L 24(SP),A0;structure formulaire en fenˆtre
 BSR AFF_OBJC
 MOVEQ #BSAUVER,D0
 BSR AFF_OBJC
 MOVEQ #BTEST,D0
 BSR AFF_OBJC 
\1:MOVE.L 20(SP),A0;structure liste resolutions
 BSR MODIF_RES
 MOVEM.L (SP)+,D0/A0
 RTS

MODIF_RES:;A0 pointe sur structure LISTE_RES

 MOVEM.L D0/D1,-(SP)
 MOVE 10(A0),REZ
 MOVE 12(A0),D0;modecode
 TST D_ATI
 BNE.S \1
 MOVEQ #0,D1
 BSET #PAL,D1
 AND D1,MODECODE;conserve flag PAL
 NOT D1
 MOVE 12(A0),D0;modecode
 AND D1,D0
 OR MODECODE,D0
\1:MOVE D0,MODECODE
 MOVEM.L (SP)+,D0/D1
 RTS

TEMPO_5S:

 MOVE.L _HZ_200,D1
\1:MOVE.L _HZ_200,D0
  SUB.L D1,D0
 CMP.L #1000,D0
 BCS.S \1
 RTS

NB_PLANS:;retourne nbre de plans ‚cran dans D0

 MOVEM.L D1-A5,-(SP)
 LINK A6,#-114
 VQ_EXTND HANDLE,#1,-114(A6)
 MOVE -106(A6),D0
 UNLK A6
 MOVEM.L (SP)+,D1-A5
 RTS

GERE_DIAL_VIDEO:

 MOVEM.L D1-D4/A0-A3,-(SP)
 MOVE.L 36(SP),A3;structure formulaire en fenˆtre
 MOVE 44(SP),D3
 MOVE 46(SP),D4
 LINK A6,#-12
 PEA -12(A6)
 LEA -4(A6),A1;retourne arbre objet
 MOVE.L A3,A0;structure formulaire en fenˆtre
 BSR WIND_FORM_GET;nouvelle fonction GEM
 ADDQ #4,SP
 TST D3
 BPL.S \3
 CMP #-3,D3
 BEQ \4;fin dialogue
 BRA \2
\3:MOVE D3,D0
 CMP #1,D4;nbre de clics ?
 BLE.S \5
 OR #$8000,D0
\5:MOVE.L FORM1,A0
 BSR FORM_EXTND_BUTTON;nouvelle fonction GEM
 INC D0
 BNE.S \6
 MOVEQ #BOK,D3
\6:CMP #BSAUVER,D3
 BEQ \10
 CMP #BTEST,D3
 BEQ \22
 CMP #BOK,D3
 BEQ \11
 CMP #BABANDON,D3
 BEQ \12
 CMP #BCOUL,D3
 BEQ \8
 CMP #BICONERES,D3
 BNE \2
\15:MOVEM.L D3/D4/A3/A4,-(SP)
  GRAF_MKSTATE D1,D1,D1,D0,D1
  MOVEM.L (SP)+,D3/D4/A3/A4
 TST D0
 BNE.S \15;attente fin clic
 BSR INIT_TYPE_VIDEO;=> REZ & MODECODE courants & tab LISTE_RES initialis‚
 BRA \9
;test
\22:CMP #3,VIDEO;FALCON
 BNE \25
 TST D_ATI
 BEQ \26
 MOVE.L A3,-(SP)
 LINK A6,#-24
 WIND_UPDATE #1,D0
 GRAF_MOUSE #256,ADDRIN,D0;hidem
 WIND_GET #0,WF_WORKXYWH,D0,-8(A6);desktop
 WIND_GET #0,WF_SCREEN,D0,-24(A6);tampon AES
 FORM_DIAL #0,-8(A6),-8(A6),D0
 MOVE.L -20(A6),D1;taille tampon
 LEA MFDB_SOURCE_DIAL,A0
 LEA MFDB_DEST_DIAL,A1
 CLR.L (A0);‚cran
 MOVE.L -24(A6),(A1);tampon AES
 CLR.L -24(A6);X1,Y1
 CLR.L -16(A6)
 MOVE -4(A6),D0;W desktop
 DEC D0
 MOVE D0,-20(A6);X2
 MOVE D0,-12(A6)
 MOVE -6(A6),D0;Y desktop
 DEC D0
 MOVE D0,-18(A6);Y2
 MOVE D0,10(A6) 
 MOVE WORK_OUT+2,D0;H
 INC D0
 MOVE D0,6(A1);hauteur du bloc
 MOVE WORK_OUT,D0;W
 INC D0
 ADD #15,D0
 AND #$FFF0,D0
 MOVE D0,4(A1);largeur du bloc modulo 16
 LSR #4,D0
 MOVE D0,8(A1);largeur/16
 CLR 10(A1)
 JSR NB_PLANS
 MOVE D0,12(A1);plans
 VRO_CPYFM HANDLE,#3,-24(A6),(A0),(A1);save menu
 VSETMODE #-1
 MOVE D0,-(SP);sauve modecode courant
 MOVEQ #0,D0
 MOVE MODECODE,D0
 BCLR #VIRTUAL_SCREEN,D0
 MOVE D0,-(SP)
 MOVE.L D0,A0
 VSETSCREEN #CMD_TESTMODE,#$564E,(A0),-1; 0x564E 'VN' (Vsetscreen New)
 SUPEXEC TEMPO_5S
 VSETMODE #-1
 SWAP D0;modecode test‚
 MOVE (SP)+,D0;modecode demand‚ pour le test
 MOVE (SP)+,D1
 MOVE.L D0,-(SP)
 VSETMODE D1;restaure modecode courant
 LEA MFDB_DEST_DIAL,A0
 LEA MFDB_SOURCE_DIAL,A1
 VRO_CPYFM HANDLE,#3,-24(A6),(A0),(A1);restore menu
 FORM_DIAL #3,-8(A6),-8(A6),D0;redraw
 GRAF_MOUSE #257,ADDRIN,D0;showm
 GRAF_MOUSE #0,ADDRIN,D0;fl‚che
 WIND_UPDATE #0,D0
 MOVE.L (SP)+,D0
 UNLK A6
 MOVE.L (SP)+,A3
 MOVE.L D0,D1
 SWAP D1;modecode test‚
 CMP D1,D0
 BEQ \25
 ;la r‚solution est diff‚rente de celle test‚e
 MOVE.L LISTE_RES,A2;cherche une r‚solution
 BRA.S \28
\29:CMP 12(A2),D1;cherche modecode test‚
  BEQ.S \30 
  MOVE.L (A2),A2;descritif suivant
\28:MOVE.L A2,D0
 BNE.S \29
 BRA \25
\30:LEA MESS3,A1
 TST D_FRA
 BNE.S \27
 LEA MESS3E,A1
\27:LEA TMP_MESS,A0
\31:MOVE.B (A1)+,(A0)+
 BNE.S \31
 SUBQ.L #1,A0
 MOVEQ #0,D0
 MOVE 14(A2),D0;largeur
 MOVEQ #4,D1
 BSR CONV_DECI_DIAL
 MOVE.B #"x",(A0)+
 MOVEQ #0,D0
 MOVE 16(A2),D0;hauteur
 MOVEQ #4,D1
 BSR CONV_DECI_DIAL
 MOVE.B #"@",(A0)+
 MOVEQ #0,D0
 MOVE 18(A2),D0;refresh
 MOVEQ #3,D1
 BSR CONV_DECI_DIAL
 LEA MESS3B,A1
\32:MOVE.B (A1)+,(A0)+
 BNE.S \32
 LEA TMP_MESS,A0
 BRA.S \24
\26:MOVE.L #"PICD",D0
 BSR GET_COOKIE
 BMI.S \25
 MOVE.L D0,A0
 CMP #$204,40(A0);version
 BCS.S \25
 MOVE.L 52(A0),D0;fonction test
 BEQ.S \25
 MOVE.L D0,A0 
 MOVE MODECODE,D0
 MOVE D0,-(SP)
 JSR (A0)
 ADDQ #2,SP
 CMP #-1,D0
 BNE.S \23
 LEA MESS1,A0
 TST D_FRA
 BNE.S \24
 LEA MESS1E,A0
 BRA.S \24
\23:CMP #-2,D0
 BNE.S \25 
 LEA MESS2,A0
 TST D_FRA
 BNE.S \24
 LEA MESS2E,A0
\24:BSR FORM_ALERT_
\25:MOVE.L -4(A6),A0
 AND #~SELECTED,BTEST*24+10(A0);OB_STATE
 MOVEQ #BTEST,D0
 MOVE.L A3,A0;structure formulaire en fenˆtre
 BSR AFF_OBJC 
 BRA \9
;couleurs
\8:MOVE PLANS,D2
 MOVE D2,SAUVE_PLANS
 SUB MIN_PLANS,D2;index actuel
 MOVE MAX_PLANS,D1
 SUB MIN_PLANS,D1
 INC D1;nombre de lignes
 MOVE MIN_PLANS,D0
 ASL #2,D0
 LEA TAB_POPUP_COUL,A1
 ADD D0,A1;pointeur tableau textes popup menu
 MOVE.L -4(A6),A0;arbre objet
 MOVEQ #BCOUL,D0;objet
 BSR POPUP_MENU
 BMI \2
 ADD MIN_PLANS,D0
 MOVE D0,PLANS
 MOVEQ #0,D1
 MOVE.L LISTE_RES,A0;cherche une r‚solution courante s‚lectionn‚e
 BRA.S \18
\16:TST 4(A0)
  BEQ.S \17;non selected
  MOVE 12(A0),D1;modecode sauv‚
\17:MOVE.L (A0),A0;descritif suivant
\18:MOVE.L A0,D0
 BNE.S \16
 BSR INIT_LISTE_RES
 CLR REZ
 CLR MODECODE
 MOVE.L LISTE_RES,A0;cherche une r‚solution d‚ja choisie dans le nombre de couleurs s‚lectionn‚
 TST D_ATI
 BEQ.S \7
 TST NB_RES
 BNE.S \7
 MOVE SAUVE_PLANS,PLANS 
 BRA \8
\13:TST 4(A0)
  BEQ.S \14;non selected
  BSR MODIF_RES
\14:MOVE.L (A0),A0;descritif suivant
\7:MOVE.L A0,D0
 BNE.S \13
 TST REZ
 BNE.S \9
 TST D1
 BEQ.S \9
 AND #~NUMCOLS,D1
 MOVE.L LISTE_RES,A0;cherche une r‚solution choisie dans le nombre de couleurs s‚lectionn‚ auparavant
 BRA.S \19
\21:MOVE 12(A0),D0;modecode
  AND #~NUMCOLS,D0
  CMP D0,D1;modecode
  BNE.S \20
  MOVE #1,4(A0);selected
  BSR MODIF_RES
\20:MOVE.L (A0),A0;descritif suivant
\19:MOVE.L A0,D0
 BNE.S \21
\9:BSR INIT_BCOUL
 MOVE.L LISTE_RES,A1
 MOVE.L FORM1,A0
 BSR FORM_EXTND_SET;nouvelle fonction GEM
 SUB.L A1,A1
 MOVE.L FORM1,A0
 BSR FORM_EXTND_SET2;nouvelle fonction GEM
 BSR INIT_BSAUVER_BOK_BTEST
 MOVEQ #0,D0
 MOVE.L A3,A0;structure formulaire en fenˆtre
 BSR AFF_OBJC
 BRA.S \2
;sauver
\10:BSR MODIF_INF
 MOVE.L -4(A6),A0
 AND #~SELECTED,BSAUVER*24+10(A0);OB_STATE
 MOVEQ #BSAUVER,D0
 MOVE.L A3,A0;structure formulaire en fenˆtre
 BSR AFF_OBJC
 BRA.S \2
;OK
\11:MOVE #1,D_OK
 BRA.S \4
;ABANDON
\12:CLR D_OK
\4:MOVEQ #0,D0;fin dialogue
 BRA.S \1
\2:MOVEQ #1,D0
\1:UNLK A6
 MOVEM.L (SP)+,D1-D4/A0-A3
 RTS

CHOIX_VIDEO:

 MOVEM.L D1-A5,-(SP)
 LINK A6,#-48
 BSR INIT_BSAUVER_BOK_BTEST
 BSR INIT_BCOUL
 CLR.L -(SP)
 CLR.L -(SP)
 MOVEQ #0,D1
 MOVEQ #0,D0
 MOVE.L TAB_ARBRES,A1;adresse tableau d'arbres
 MOVE.L (A1),A1;adresse arbre objet 1
 LEA GERE_DIAL_VIDEO,A0;routine
 BSR WIND_FORM_ALLOC;nouvelle fonction GEM
 ADDQ #8,SP
 MOVE.L A0,WINDFORM1
 BEQ \3;erreur
 CLR -(SP)
 CLR -(SP)
 CLR -(SP)
 CLR -(SP)
 MOVE.L A0,-(SP);structure formulaire en fenˆtre
 MOVE.L A0,-(SP);structure formulaire en fenˆtre
 MOVEQ #$28,D1
 MOVE D1,-(SP)
 PEA TAB_CHOIX_RES;index des objets des 10 r‚solutions visibles de la boŒte
 PEA TAB_SLIDER_RES;index des objets
 MOVE.L LISTE_RES,-(SP)
 PEA SELECT_LISTE_RES;routine => change ‚tat LISTE_RES
 MOVEQ #$1F,D2
 LEA CLIC_RES,A1;routine => boutons OK et SAUVER s‚lectables
 MOVE.L TAB_ARBRES,A0;adresse tableau d'arbres
 MOVE.L (A0),A0;adresse arbre objet 1
 MOVEQ #10,D0
 MOVEQ #0,D1
 BSR FORM_EXTND_ALLOC;nouvelle fonction GEM
 LEA 34(SP),SP
 MOVE.L A0,FORM1
 BEQ \4
 CLR.L -(SP)
 CLR -(SP)
 MOVEQ #-1,D2
 MOVEQ #-1,D1
 MOVE.L STRINGS,A1;adresse chaŒnes
 MOVE.L (A1),A1;titre fenˆtre
 MOVE.L WINDFORM1,A0
 MOVEQ #11,D0;MOVER+CLOSER+NAME
 BSR WIND_FORM_CREATE;nouvelle fonction GEM
 ADDQ #6,SP
 TST D0
 BEQ \1;erreur
\2:EVNT_MULTI #MU_KEYBD+MU_BUTTON+MU_MESAG,#2,#1,#1,#0,-32(A6),#0,-32(A6),#0,-16(A6),-48(A6),-46(A6),-38(A6),-36(A6)
  LEA -48(A6),A1
  MOVE.L WINDFORM1,A0
  BSR WIND_FORM_DIAL;nouvelle fonction GEM
 TST D0
 BNE \2
 MOVE.L WINDFORM1,A0
 BSR WIND_FORM_DELETE;nouvelle fonction GEM
\1:MOVE.L FORM1,A0
 BSR FORM_EXTND_FREE;nouvelle fonction GEM
\4:MOVE.L WINDFORM1,A0
 BSR WIND_FORM_FREE;nouvelle fonction GEM
\3:MOVE D_OK,D0
 UNLK A6
 MOVEM.L (SP)+,D1-A5
 RTS

AFF_OBJC:;structure formulaire en fenˆtre dans A0, objet dans D0

 MOVEM.L D0-A5,-(SP)
 LINK A6,#-16
 MOVE D0,D7
 MOVE.L A0,A5;structure formulaire en fenˆtre
 PEA -16(A6)
 LEA -4(A6),A1;retourne arbre objet
 BSR WIND_FORM_GET;nouvelle fonction GEM
 ADDQ #4,SP
 WIND_UPDATE #1,D0
 MOVEQ #8,D1;profondeur
 MOVE D7,D0;objet de d‚part
 LEA -16(A6),A1
 MOVE.L A5,A0;structure formulaire en fenˆtre
 BSR WIND_FORM_DRAW;nouvelle fonction GEM
 WIND_UPDATE #0,D0
 UNLK A6
 MOVEM.L (SP)+,D0-A5
 RTS

INIT_RSC:

 MOVEM.L D0-A5,-(SP)
 LINK A6,#-2
 MOVE.L APPTREE+4,A0
 MOVE 18(A0),D0;adresse relative tableau d'arbre
 LEA (A0,D0),A1
 MOVE.L A1,TAB_ARBRES;adresse arbres
 MOVE 22(A0),NB_ARBRES;nbre d'arbres objets
 MOVE 10(A0),D0;adresse relative chaŒnes
 LEA (A0,D0),A0
 MOVE.L A0,STRINGS;adresse chaŒnes
 MOVE.L TAB_ARBRES,A5;adresse tableau d'arbres
 MOVE.L (A5),A5;adresse arbre objet 1
 DEC BHAUT*24+18(A5);OB_Y
 DEC BBAS*24+18(A5);OB_Y
 MOVE.L BICONERES*24+12(A5),A1;OB_SPEC -> TEDINFO
 MOVE BICONERES*24+22(A5),D0;OB_HEIGHT
 SUB 24(A1),D0;TE_TXTLEN
 ASR #1,D0
 ADD D0,BICONERES*24+18(A5);OB_Y
 OR #HIDETREE,INFORES*24+8(A5);OB_FLAGS
 CMP #3,VIDEO;FALCON
 BNE.S \2
 MOVE.L #"PICD",D0
 BSR GET_COOKIE
 BMI.S \2
 MOVE.L D0,A0
 CMP #$200,40(A0);version
 BCS.S \2
 AND #~HIDETREE,INFORES*24+8(A5);OB_FLAGS
\2:OBJC_SYSVAR #0,#6,#0,#0,D0,-2(A6),-2(A6);AD3DVAL
 TST D0
 BNE.S \1;OK => 3D
 AND #$FF00,BHAUT*24+12(A5);OB_STATE
 OR #1,BHAUT*24+12(A5)
 AND #$FF00,BBAS*24+12(A5);OB_STATE
 OR #1,BBAS*24+12(A5)
 AND #$FF00,BSLIDER*24+12(A5);OB_STATE
 OR #1,BSLIDER*24+12(A5)
 AND #$FFF0,SLIDER*24+14(A5);OB_SPEC
 OR #1,SLIDER*24+14(A5)
 AND #$FF8F,SLIDER*24+14(A5)
 OR #$10,SLIDER*24+14(A5)
\1:UNLK A6
 MOVEM.L (SP)+,D0-A5
 RTS

INIT_BCOUL:

 MOVEM.L D0/A1/A0/A1,-(SP)
 MOVE PLANS,D0;nbre de bits par plan:
;              0:2  1:4  2:16  3:256  4:65536 :5:16M
 ASL #2,D0
 LEA TAB_POPUP_COUL,A0
 MOVE.L (A0,D0),A0
 MOVE.L TAB_ARBRES,A1;adresse tableau d'arbres
 MOVE.L (A1),A1;adresse arbre objet 1
 MOVE.L BCOUL*24+12(A1),A1;OB_SPEC
 TST.B (A1)
 BEQ.S \1
 MOVE.B #" ",(A1)+
\1:TST.B (A1)
 BEQ.S \2
 MOVE.B #" ",(A1)+
 BRA.S \2
\3:MOVE.B (A0)+,(A1)+
\2:TST.B (A1)
  BEQ.S \4
 TST.B (A0)
 BNE.S \3
 BRA.S \4
\5:MOVE.B #" ",(A1)+
\4:TST.B (A1)
 BNE.S \5
 MOVEM.L (SP)+,D0/A0/A1
 RTS

INIT_BSAUVER_BOK_BTEST:

 MOVE.L A0,-(SP)
 MOVE.L TAB_ARBRES,A0;adresse tableau d'arbres
 MOVE.L (A0),A0;adresse arbre objet 1
 TST REZ
 BNE.S \1
 OR #DISABLED,BOK*24+10(A0);OB_STATE
 AND #~(SELECTABLE+DEFAULT),BOK*24+8(A0);OB_FLAGS
 OR #DISABLED,BSAUVER*24+10(A0);OB_STATE
 AND #~SELECTABLE,BSAUVER*24+8(A0);OB_FLAGS
 OR #DISABLED,BTEST*24+10(A0);OB_STATE
 AND #~SELECTABLE,BTEST*24+8(A0);OB_FLAGS
 BRA.S \2
\1:AND #~DISABLED,BOK*24+10(A0);OB_STATE
 OR #SELECTABLE+DEFAULT,BOK*24+8(A0);OB_FLAGS
 AND #~DISABLED,BSAUVER*24+10(A0);OB_STATE
 OR #SELECTABLE,BSAUVER*24+8(A0);OB_FLAGS
 OR #DISABLED,BTEST*24+10(A0);OB_STATE
 AND #~SELECTABLE,BTEST*24+8(A0);OB_FLAGS
 CMP #3,VIDEO;FALCON
 BNE.S \2
 TST D_ATI
 BNE.S \3
 MOVE.L #"PICD",D0
 BSR GET_COOKIE
 BMI.S \2
 MOVE.L A0,-(SP)
 MOVE.L D0,A0
 CMP #$204,40(A0);version
 MOVE.L (SP)+,A0
 BCS.S \2
\3:AND #~DISABLED,BTEST*24+10(A0);OB_STATE
 OR #SELECTABLE,BTEST*24+8(A0);OB_FLAGS
\2:MOVE.L (SP)+,A0
 RTS

INIT_TYPE_VIDEO:

 MOVEM.L D0-D2/A0-A2,-(SP)
 MOVE #2,MONITEUR;VGA
 CLR PLANS
 MOVE.L #"_VDO",D0
 BSR GET_COOKIE
 SWAP D0
 MOVE D0,VIDEO
 GETREZ
 ADDQ #2,D0
 MOVE D0,REZ
 CLR MODECODE
 MOVE VIDEO,D0
 CMP #2,D0
 BCS.S \1;ST(E)
 BEQ.S \2;TT
 CMP #3,D0
 BEQ \3;FALCON
 BRA \8
;ST(E)
\1:MOVE #1,MONITEUR;couleur
 MOVE REZ,D0
 CMP #2,D0;ST BASSE
 BNE.S \4
 MOVE #2,PLANS;16 couleurs
 BRA.S \7
\4:CMP #3,D0;ST MOYENNE
 BNE.S \5
 MOVE #1,PLANS;4 couleurs
 BRA.S \7
\5:CMP #4,D0;ST HAUTE
 BNE.S \7
 CLR MONITEUR;monochrome
 CLR PLANS;2 couleurs
\7:TST MONITEUR
 BEQ \9;monochrome
 MOVE #1,MIN_PLANS;4 couleurs
 MOVE #2,MAX_PLANS;16 couleurs
 BRA \6
;TT
\2:MOVE #2,MONITEUR;VGA
 MOVE REZ,D0
 CMP #2,D0;ST BASSE
 BNE.S \11
 MOVE #2,PLANS;16 couleurs
 BRA.S \10
\11:CMP #3,D0;ST MOYENNE
 BNE.S \12
 MOVE #1,PLANS;4 couleurs
 BRA.S \10
\12:CMP #4,D0;ST HAUTE
 BNE.S \13
 CLR PLANS;2 couleurs
 BRA.S \10
\13:CMP #6,D0;TT MOYENNE
 BNE.S \14
 MOVE #2,PLANS;16 couleurs
 BRA.S \10
\14:CMP #8,D0;TT HAUTE
 BNE.S \15
 CLR MONITEUR;monochrome
 CLR PLANS;2 couleurs
 BRA.S \10
\15:CMP #9,D0;TT BASSE
 BNE.S \10
 MOVE #3,PLANS;256 couleurs
\10:TST MONITEUR
 BEQ \9;monochrome
 CLR MIN_PLANS;2 couleurs
 MOVE #3,MAX_PLANS;256 couleurs
 BRA \6
;FALCON
\3:MOVE #5,REZ
 VSETMODE #-1
 MOVE D0,MODECODE
 MONTYPE
 MOVE D0,MONITEUR
 VSETMODE #-1
 AND #7,D0
 MOVE D0,PLANS
 MOVE.L #"PICD",D0
 BSR GET_COOKIE
 BMI.S \21
 MOVE.L D0,A0
 MOVE 22(A0),D0;modecode PICDESK
 TST MONITEUR
 BNE.S \22
;monochrome
 CMP #$88,MODECODE;ST HAUTE
 BNE.S \22
 AND #$FF40,D0;conserve flags VERTFLAG et OVERSCAN
 BRA.S \23
;couleur ou VGA
\22:BTST #STMODES,D0
 BEQ.S \24
 BTST #VGA_FALCON,MODECODE+1
 BEQ.S \24
 MOVE D0,-(SP)
 MOVE.L #"_FRQ",D0
 BSR GET_COOKIE
 BMI.S \25
 CMP.L #40,D0;Speed Resolution Card … 40 MHz
 BCS.S \25
 MOVE (SP)+,D0
 MOVE MODECODE,D2
 AND #$FF08,D2;VERTFLAG, COL80 & flags ‚tendus
 BNE.S \24
 MOVE MODECODE,D2
 AND #7,D2
 CMP #4,D2;NTC 640 * 400 multisync
 BNE.S \24
 AND #$FFC0,D0;conserve flags VERTFLAG, STMODES et OVERSCAN
 BRA.S \23
\25:MOVE (SP)+,D0
\24:AND #$FE40,D0;conserve flag OVERSCAN
\23:OR D0,MODECODE
\21:MOVE MONITEUR,D1
 BNE.S \16;<> monochrome
;monochrome
\9:CLR MIN_PLANS;2 couleurs
 CLR MAX_PLANS;2 couleurs
 BRA.S \6
\16:CLR MIN_PLANS;2 couleurs
 MOVE #4,MAX_PLANS;65536 couleurs
 BRA.S \6
\8:CLR REZ
\6:BSR INIT_LISTE_RES
 MOVE.L LISTE_RES,A0
 TST D_ATI
 BEQ.S \17
 INC MAX_PLANS
 VSETMODE #-1
 MOVE D0,MODECODE
 MOVE.L LISTE_RES,A0
 BRA.S \17
\18:MOVE 10(A0),D0;rez
  CMP REZ,D0
  BNE.S \19
  MOVE 12(A0),D0;modecode
  CMP MODECODE,D0
  BNE.S \19
  MOVE #1,4(A0);selected
  BRA.S \20
\19:MOVE.L (A0),A0;descriptif suivant
\17:MOVE.L A0,D0
 BNE.S \18
\20:MOVEM.L (SP)+,D0-D2/A0-A2
 RTS

POPUP_MENU:;arbre objet point‚ par A0, objet dans D0
;D1 nombre de lignes, D2 index actuel
;A1 pointeur tableau textes popup menu
;au retour index dans D0, ou erreur si < 0

 MOVEM.L D1-A5,-(SP)
 LINK A6,#-6
 MOVE D0,-6(A6);objet bouton formulaire
 MOVE.L A0,-4(A6);arbre objet formulaire
 MOVE.L A1,A4;pointeur tableau textes popup menu
 MOVE D1,D6;nombre de lignes
 MOVE D2,D3;ligne actuelle
 MULU #24,D0
 LEA (A0,D0.L),A3
 MOVEQ #0,D4
 MOVEQ #0,D5
 BRA.S \14
\13:MOVE D5,D0;recherche nombre de caractŠres max pour dimensionner le popup menu en largeur
  ASL #2,D0
  MOVE.L (A4,D0),A0
  BSR LONGUEUR_CHAINE
  CMP D4,D0
  BLE.S \15
  MOVE D0,D4;nbre de caractŠres max
\15:INC D5
\14:CMP D5,D6;nbre de lignes
 BGT.S \13
 MOVE D6,D0;nbre de lignes
 ADD D0,D0
 INC D0
 MULU #24,D0
 BSR MALLOC_D0;buffer pour cr‚er arbre objet popup menu
 BMI \1
 MOVE.L D0,A5
 ADDQ #4,D4;nbre de caractŠres max + 4
 MULU GR_HWCHAR,D4;* largeur caractŠre
 CMP 20(A3),D4;OB_WIDTH bouton formulaire
 BGE.S \12
 MOVE 20(A3),D4
\12:MOVE.L A5,A0
 MOVE #-1,(A0);OB_NEXT
 MOVE #FL3DBAK,8(A0);OB_FLAG
 TST D6
 BLE.S \11
 MOVE #1,2(A0);OB_HEAD
 MOVE D6,D0;nbre de lignes
 ADD D0,D0
 DEC D0
 MOVE D0,4(A0);OB_TAIL
 BRA.S \10
\11:OR #LASTOB,8(A0);OB_FLAG
 MOVEQ #-1,D0
 MOVE D0,2(A0);OB_HEAD
 MOVE D0,4(A0);OB_TAIL
\10:MOVE #G_BOX,6(A0);OB_TYPE
 MOVE #SHADOWED,10(A0);OB_STATE
 MOVE.L #$FF1000,12(A0);OB_SPEC
 CLR.L 16(A0);OB_X, OB_Y
 MOVE D4,20(A0);OB_WIDTH
 MOVE D6,D0;nbre de lignes
 MULU GR_HHCHAR,D0
 MOVE D0,22(A0);OB_HEIGHT
 MOVEQ #0,D1
 MOVE 22(A3),D7
 NEG D7
 MOVEQ #1,D5
 BRA \5
\4:LEA 24(A0),A0
  CMP D5,D6;nbre de lignes
  BLE.S \6
  MOVE D5,D0
  ADD D0,D0
  INC D0
  MOVE D0,(A0);OB_NEXT
  BRA.S \7
\6:CLR (A0);OB_NEXT
\7:MOVE D5,D0
  ADD D0,D0
  MOVE D0,2(A0);OB_HEAD
  MOVE D0,4(A0);OB_TAIL
  MOVE #G_IBOX,6(A0);OB_TYPE
  MOVE #FL3DBAK+SELECTABLE,8(A0);OB_FLAG
  MOVEQ #NORMAL,D0
  MOVE D3,D2;index actuel
  INC D2
  CMP D2,D5
  BNE.S \8
  MOVE D1,D7;position m‚moris‚ pour placement du popup (valeur CHECKED sur bouton formulaire)
  OR #CHECKED,D0
\8:MOVE D0,10(A0);OB_STATE
  CLR.L 12(A0);OB_SPEC
  CLR 16(A0);OB_X
  MOVE D1,18(A0);OB_Y
  MOVE D4,20(A0);OB_WIDTH
  MOVE GR_HHCHAR,22(A0);OB_HEIGHT
  LEA 24(A0),A0
  MOVE D5,D0
  ADD D0,D0
  DEC D0
  MOVE D0,(A0);OB_NEXT
  MOVEQ #-1,D0
  MOVE D0,2(A0);OB_HEAD
  MOVE D0,4(A0);OB_TAIL
  MOVE #G_STRING,6(A0);OB_TYPE
  MOVEQ #NONE,D0
  CMP D5,D6;nbre de lignes
  BNE.S \9
  OR #LASTOB,D0
\9:MOVE D0,8(A0);OB_FLAGS
  MOVE #NORMAL,10(A0);OB_STATE
  MOVE D5,D0
  ASL #2,D0
  MOVE.L -4(A4,D0),12(A0);OB_SPEC
  MOVE GR_HWCHAR,D0
  ADD D0,D0
  MOVE D0,16(A0);OB_X
  CLR 18(A0);OB_Y
  CLR 20(A0);OB_HEIGHT
  MOVE GR_HHCHAR,22(A0);OB_HEIGHT
  ADD GR_HHCHAR,D1
  INC D5
\5:CMP D5,D6
 BGE \4
 MOVE.L -4(A6),A0;arbre objet formulaire
 OBJC_OFFSET -6(A6),(A0),D0,16(A5),18(A5)
 SUB D7,18(A5);OB_Y
 MOVEQ #0,D0
 MOVEQ #0,D1
 MOVE.L A5,A0;arbre popup menu
 BSR POPUP_MENU_MAGIC;nouvelle fonction GEM
 MOVE D0,D3
 BLE.S \3
 DEC D3
 ASR #1,D3
 BRA.S \2
\3:MOVEQ #-1,D3
\2:MFREE (A5)
\1:MOVE D3,D0
 UNLK A6
 MOVEM.L (SP)+,D1-A5
 RTS

MODIF_INF:;retourne code erreur dans D0

 MOVEM.L D1-A5,-(SP)
 LEA 0,A5;buffer non allou‚
 OPEN #0,MAGX_INF
 EXT.L D0
 BMI \9
 MOVE D0,D6;handle
 LSEEK #2,D6,#0
 MOVE.L D0,D5
 BLE \6
 LSEEK #0,D6,#0
 TST.L D0
 BMI \6
 MOVE.L D5,D0
 ADDQ.L #8,D0
 BSR MALLOC_D0;buffer MAGX.INF
 BMI \6
 MOVE.L D0,A5
 READ (A5),D5,D6
 TST.L D0
 BMI \6
 CLOSE D6
 MOVE.L A5,A0;d‚but fichier
 LEA (A5,D5.L),A1;fin fichier
\11:CMP.B #"#",(A0)+
  BNE.S \7
  CMP.B #"_",(A0)+;description ‚cran
  BNE.S \7
  CMP.B #"D",(A0)+
  BNE.S \7
  CMP.B #"E",(A0)+
  BNE.S \7
  CMP.B #"V",(A0)+
  BEQ.S \8
\7:CMP.L A1,A0
 BCS.S \11
\12:MOVEQ #-1,D0;erreur fichier MAGX.INF
 BRA \9
\8:BSR LONG_DECI
 BMI.S \12;erreur
 MOVE.L A0,-(SP)
 SUB D0,A0
 MOVE D0,D1;nbre de caractŠres (1 normalement)
 MOVEQ #0,D0
 MOVE REZ,D0
 BSR CONV_DECI
 MOVE.L (SP)+,A0
 BSR LONG_DECI
 BMI.S \12;erreur
 SUB D0,A0
 MOVE D0,D3;longueur valeur fichier
 MOVE.L A0,A3;pointeur chaŒne fichier modecode
 LINK A6,#-6
 CLR -2(A6)
 LEA -6(A6),A0
 MOVEQ #0,D0
 MOVE MODECODE,D0
 MOVEQ #5,D1
 BSR CONV_DECI_DIAL
 LEA -6(A6),A0
 BSR LONG_DECI
 BMI.S \3
 MOVE D0,D2;longueur valeur de remplacement
 CMP D2,D3
 BEQ.S \10
 LEA (A3,D3),A0;d‚but
 LEA (A5,D5.L),A1;fin
 LEA (A3,D2),A2;cible
 BSR DECALE
 MOVE D2,D0;longueur valeur de remplacement
 SUB D3,D0;longueur valeur fichier
 EXT.L D0
 ADD.L D0,D5;longueur fichier
\10:LEA -6(A6),A0
 MOVE.L A3,A1
 BRA.S \1
\2:MOVE.B (A0)+,(A1)+;modecode valeur chang‚e
\1:DBRA D2,\2
\3:UNLK A6
 CREATE #0,MAGX_INF
 EXT.L D0
 BMI.S \9;erreur
 MOVE D0,D6;handle
 WRITE (A5),D5,D6
 TST.L D0
 BPL.S \4
\6:MOVE.L D0,-(SP)
 CLOSE D6
 MOVE.L (SP)+,D0
 BRA.S \9
\4:CLOSE D6
\9:MOVE.L D0,-(SP)
 MOVE.L A5,D0
 BEQ.S \5
 MFREE (A5)
\5:MOVE.L (SP)+,D0
 MOVEM.L (SP)+,D1-A5
 RTS

MALLOC_D0:

 MOVE.L A0,-(SP)
 MOVE.L D0,-(SP)
 MALLOC #-1
 MOVE.L (SP)+,A0
 CMP.L D0,A0
 BCS.S \1
\3:MOVEQ #-39,D0
 BRA.S \2
\1:MALLOC A0
 TST.L D0
 BLE.S \3
\2:MOVE.L (SP)+,A0
 TST.L D0
 RTS

LONGUEUR_CHAINE:;chaŒne point‚e par A0, au retour longueur dans D0

 MOVEM.L A0/A1,-(SP)
 MOVE.L A0,A1
\1:TST.B (A0)+
 BNE.S \1
 MOVE.L A0,D0
 SUB.L A1,D0
 MOVEM.L (SP)+,A0/A1
 SUBQ.L #1,D0
 RTS

DECALE:;deplace le bloc (A0)-(A1) vers (A2)  ((A1) non compris)

 CMP.L A0,A2
 BCC.S \2
\1:MOVE.B (A0)+,(A2)+
 CMP.L A1,A0
 BCS \1
 BRA.S \3
\2:ADD.L A1,A2
 SUB.L A0,A2
\4:MOVE.B -(A1),-(A2)
 CMP.L A0,A1
 BHI.S \4
\3:RTS

CONV_DECI:;A0:pointeur cible chaŒne ASCII, D0:valeur sur 32 bits, D1:nombre de chiffres

 BSR CONV_DECI_SIMPLE
 DEC D1
 BEQ.S \1
 SWAP D0
 TST D0
 BNE.S \3;d‚passement
 MOVEQ #0,D0
\2:CMP.B #"0",(A0,D0)
  BNE.S \1
  MOVE.B #" ",(A0,D0);enl‚ve les z‚ros inutiles
  INC D0
 CMP D1,D0
 BNE.S \2
 BRA.S \1
\3:MOVE.B #"?",(A0,D1)
 DBRA D1,\3
\1:RTS

CONV_DECI_SIMPLE:;A0:pointeur cible chaŒne ASCII, D0:valeur sur 32 bits, D1:nombre de chiffres

 MOVE D1,-(SP)
 DEC D1
 MOVE.L D0,-(SP)
\1:MOVEQ #0,D0
  MOVE (SP),D0
  DIVU #10,D0;poids fort /10
  MOVE D0,(SP);r‚sultat poids fort
  MOVE 2(SP),D0
  DIVU #10,D0;((reste * 65536) + poids faible)/10
  MOVE D0,2(SP);r‚sultat poids faible
  SWAP D0
  OR #$30,D0
  MOVE.B D0,(A0,D1)
 DBRA D1,\1
 ADDQ.L #4,SP
 MOVE (SP)+,D1
 RTS

CONV_DECI_DIAL:;A0:pointeur ASCII, D0:valeur sur 32 bits, D1:nbre de chiffres maxi

 MOVE.L A1,-(SP)
 LINK A5,#-16
 MOVE.L A0,-(SP)
 LEA -16(A5),A0
 MOVE D1,-(SP)
 BSR CONV_DECI
 MOVE (SP)+,D1
 MOVE.L (SP)+,A0
 LEA -16(A5),A1
 DEC D1
 BMI.S \3
\1:MOVE.B (A1)+,D0
  CMP.B #" ",D0
  BEQ.S \2
  MOVE.B D0,(A0)+
\2:DBRA D1,\1
 CLR.B (A0)
\3:UNLK A5
 MOVE.L (SP)+,A1
 RTS

LONG_DECI:;pointeur chaŒne dans A0
; au retour longueur chiffres dans D0 ou -1 si erreur
;          pointeur A0 mis … jour (fin chiffres)

 MOVE D1,-(SP)
 MOVEQ #0,D0
\3:MOVE.B (A0)+,D1
  CMP.B #"0",D1
  BCS.S \4
  CMP.B #"9",D1
  BHI.S \4
  INC D0
  BRA.S \3
\4:TST D0
  BNE.S \2;fin longueur
 CMP.B #" ",D1
 BEQ.S \3
 MOVEQ #-1,D0;erreur
 BRA.S \1
\2:DEC A0
\1:MOVE (SP)+,D1
 TST D0
 RTS

DIV32:;divise D0 en 32 bits par D1 en 16 bits => r‚sultat dans D0 en 32 bits

 MOVE.L D0,-(SP)
 CLR D0
 SWAP D0
 DIVU D1,D0;poids fort /D1
 MOVE D0,(SP);r‚sultat poids fort
 MOVE 2(SP),D0
 DIVU D1,D0;((reste * 65536) + poids faible)/D1
 MOVE D0,2(SP);r‚sultat poids faible
 MOVE.L (SP)+,D0
 RTS

DIV32_32S:;divise D0 en 32 bits par D1 en 32 bits sign‚s
; => r‚sultat dans D0 en 32 bits, reste dans D1 en 32 bits

 MOVEM.L D2-D4,-(SP)
 MOVEQ #1,D2
 MOVEQ #0,D4
 TST.L D0
 BGE.S \7
 BSET #15,D4
 NEG.L D0
\7:TST.L D1
 BNE.S \6
 DIVU #0,D0
 MOVEQ #0,D2
 MOVEQ #0,D3
 BRA.S \5
\6:BGE.S \1
 BSET #14,D4;diviseur n‚gatif
 NEG.L D1
\1:CMP.L D0,D1
  BCC.S \2
  ADD.L D1,D1
  ADD.L D2,D2
 BRA.S \1
\2:MOVEQ #0,D3
\3:CMP.L D0,D1
  BHI.S \4
  OR.L D2,D3
  SUB.L D1,D0
\4:LSR.L #1,D1
  LSR.L #1,D2
 BCC.S \3
 MOVE.L D0,D1;reste
 TST D4
 BPL.S \8
 NEG.L D1;reste
\8:MOVE D4,D0
 ADD D0,D0
 EOR D4,D0;B14 EOR B15 => sign‚ si 1
 BPL.S \5
 NEG.L D3;quotient
\5:MOVE.L D3,D0;quotient
 MOVEM.L (SP)+,D2-D4
 RTS

GET_COOKIE:;au retour si < 0 pas de cookie
;retourne contenu dans D0

 MOVEM.L D1-A1/A6,-(SP)
 MOVE.L D0,D6
 LEA 0,A6
 SUPER 1
 TST.L D0
 BMI.S \5;mode superviseur
 SUPER 0
 MOVE.L D0,A6;sauve SSP
\5:MOVEQ #-1,D5
 MOVEQ #0,D7
 MOVE.L _COOKIE,D0
 BEQ.S \1
 MOVE.L D0,A0
\2:TST.L (A0)
  BEQ.S \1
  CMP.L (A0),D6
  BNE.S \3
  MOVE.L 4(A0),D7
  MOVEQ #0,D5
  BRA.S \1
\3:ADDQ #8,A0
 BRA.S \2
\1:MOVE.L A6,D0
 BEQ.S \4
 SUPER (A6)
\4:MOVE.L D7,D0
 TST D5
 MOVEM.L (SP)+,D1-A1/A6
 RTS

LECTEUR_BOOT:

 MOVE _BOOTDEV,D0
 RTS

POPUP_MENU_MAGIC:

 MOVE.L A3,-(SP)
 SCF_AES 135,2,1,1,0
 LEA INTIN,A3
 MOVE D0,(A3)
 MOVE D1,2(A3)
 LEA ADDRIN,A3
 MOVE.L A0,(A3);arbre popup menu
 AES
 MOVE INTOUT,D0
 MOVE.L (SP)+,A3
 RTS

WIND_FORM_ALLOC:

 MOVE.L A3,-(SP)
 SCF_AES 160,2,0,4,1
 LEA INTIN,A3
 MOVE D0,(A3)+
 MOVE D1,(A3)+
 LEA ADDRIN,A3
 MOVE.L A0,(A3)+;routine
 MOVE.L A1,(A3)+;arbre objet
 MOVE.L 8(SP),(A3)+
 MOVE.L 12(SP),(A3)+
 AES
 MOVE.L ADDROUT,A0;structure formulaire en fenˆtre
 MOVE.L (SP)+,A3
 RTS

WIND_FORM_CREATE:

 MOVE.L A3,-(SP)
 SCF_AES 161,4,1,3,0
 LEA INTIN,A3
 MOVE D0,(A3)+;attributs fenˆtre (comme WIND_CREATE)
 MOVE D1,(A3)+
 MOVE D2,(A3)+
 MOVE 8(SP),(A3)+
 LEA ADDRIN,A3
 MOVE.L A0,(A3)+;structure formulaire en fenˆtre
 MOVE.L A1,(A3)+;titre fenˆtre
 MOVE.L 10(SP),(A3)+
 AES
 MOVE INTOUT,D0
 MOVE.L (SP)+,A3
 RTS

WIND_FORM_DELETE:

 MOVE.L A3,-(SP)
 SCF_AES 162,0,1,1,0
 LEA ADDRIN,A3
 MOVE.L A0,(A3)+;structure formulaire en fenˆtre
 AES
 MOVE INTOUT,D0
 MOVE.L (SP)+,A3
 RTS

WIND_FORM_FREE:

 MOVE.L A3,-(SP)
 SCF_AES 163,0,1,1,0
 LEA ADDRIN,A3
 MOVE.L A0,(A3)+;structure formulaire en fenˆtre
 AES
 MOVE INTOUT,D0
 MOVE.L (SP)+,A3
 RTS

WIND_FORM_GET:

 MOVE.L A3,-(SP)
 SCF_AES 164,1,0,3,0
 LEA INTIN,A3
 CLR (A3)
 LEA ADDRIN,A3
 MOVE.L A0,(A3)+;structure formulaire en fenˆtre
 MOVE.L A1,(A3)+;retourne arbre objet
 MOVE.L 8(SP),(A3)+;retourne paramŠtres
 AES
 MOVE INTOUT,D0
 MOVE.L (SP)+,A3
 RTS

WIND_FORM_DIAL:

 MOVE.L A3,-(SP)
 SCF_AES 166,0,1,2,0
 LEA ADDRIN,A3
 MOVE.L A0,(A3)+;structure formulaire en fenˆtre
 MOVE.L A1,(A3)+;7 paramŠtres de retour d'EVNT_MULTI
 AES
 MOVE INTOUT,D0
 MOVE.L (SP)+,A3
 RTS

WIND_FORM_DRAW:

 MOVE.L A3,-(SP)
 SCF_AES 167,2,0,2,0
 LEA INTIN,A3
 MOVE D0,(A3)+;objet de d‚part
 MOVE D1,(A3)+;profondeur
 LEA ADDRIN,A3
 MOVE.L A0,(A3)+;structure formulaire en fenˆtre
 MOVE.L A1,(A3)+
 AES
 MOVE.L (SP)+,A3
 RTS

FORM_EXTND_ALLOC:

 MOVE.L A3,-(SP)
 SCF_AES 170,8,0,8,1
 LEA ADDRIN,A3
 MOVE.L A0,(A3)+;arbre objet
 MOVE.L A1,(A3)+
 LEA 8(SP),A0
 MOVE.L (A0)+,(A3)+
 MOVE.L (A0)+,(A3)+
 LEA INTIN,A1
 MOVE D0,(A1)+
 MOVE D1,(A1)+
 MOVE.L (A0)+,(A3)+
 MOVE.L (A0)+,(A3)+
 MOVE D2,(A1)+
 MOVE (A0)+,(A1)+
 MOVE.L (A0)+,(A3)+
 MOVE.L (A0)+,(A3)+
 MOVE (A0)+,(A1)+
 MOVE (A0)+,(A1)+
 MOVE (A0)+,(A1)+
 MOVE (A0)+,(A1)+
 AES
 MOVE.L ADDROUT,A0;structure formulaire
 MOVE.L (SP)+,A3
 RTS

FORM_EXTND_SET2:

 MOVE.L A3,-(SP)
 SCF_AES 171,0,0,2,0
 LEA ADDRIN,A3
 MOVE.L A0,(A3)+;structure formulaire
 MOVE.L A1,(A3)+
 AES
 MOVE.L (SP)+,A3
 RTS

FORM_EXTND_BUTTON:

 MOVE.L A3,-(SP)
 SCF_AES 172,1,1,1,0
 LEA INTIN,A3
 MOVE D0,(A3)+;objet
 LEA ADDRIN,A3
 MOVE.L A0,(A3)+;structure formulaire
 AES
 MOVE INTOUT,D0
 MOVE.L (SP)+,A3
 RTS

FORM_EXTND_FREE:

 MOVE.L A3,-(SP)
 SCF_AES 173,0,1,1,0
 LEA ADDRIN,A3
 MOVE.L A0,(A3)+;structure formulaire
 AES
 MOVE INTOUT,D0
 MOVE.L (SP)+,A3
 RTS

FORM_EXTND_SET:

 MOVE.L A3,-(SP)
 SCF_AES 175,1,0,2,0
 LEA INTIN,A3
 MOVE #1,(A3)+
 LEA ADDRIN,A3
 MOVE.L A0,(A3)+;structure formulaire
 MOVE.L A1,(A3)+
 AES
 MOVE.L (SP)+,A3
 RTS

FORM_ALERT_:

 MOVEM.L D1-A5,-(SP)
 FORM_ALERT #1,(A0),D0
 MOVEM.L (SP)+,D1-A5
 RTS

 DATA

TAB_POPUP_COUL:
 DC.L COUL_2
 DC.L COUL_4
 DC.L COUL_16
 DC.L COUL_256
 DC.L COUL_65536
 DC.L COUL_16M 

TAB_COUL_LISTE_RES_ST:
 DC.L TAB_LISTE_RES_ST_2
 DC.L TAB_LISTE_RES_ST_4
 DC.L TAB_LISTE_RES_ST_16

TAB_COUL_LISTE_RES_VGA_TT:
 DC.L TAB_LISTE_RES_VGA_TT_2
 DC.L TAB_LISTE_RES_VGA_TT_4
 DC.L TAB_LISTE_RES_VGA_TT_16
 DC.L TAB_LISTE_RES_VGA_TT_256

TAB_COUL_LISTE_RES_VGA_FALCON:
 DC.L TAB_LISTE_RES_VGA_FALCON_2
 DC.L TAB_LISTE_RES_VGA_FALCON_4
 DC.L TAB_LISTE_RES_VGA_FALCON_16
 DC.L TAB_LISTE_RES_VGA_FALCON_256
 DC.L TAB_LISTE_RES_VGA_FALCON_32768

TAB_COUL_LISTE_RES_TV_FALCON:
 DC.L TAB_LISTE_RES_TV_FALCON_2
 DC.L TAB_LISTE_RES_TV_FALCON_4
 DC.L TAB_LISTE_RES_TV_FALCON_16
 DC.L TAB_LISTE_RES_TV_FALCON_256
 DC.L TAB_LISTE_RES_TV_FALCON_32768

TAB_LISTE_RES_ST_2:
 DC.L 0;pointeur sur choix suivant (nul=fin)
 DC.W 0;flag selected
 DC.L RES_ST_HAUTE
 DC.W 4;res ST HAUTE
 DC.W 0;modecode
 DC.W 640,400
 DC.W 70

TAB_LISTE_RES_ST_4:
 DC.L 0
 DC.W 0
 DC.L RES_ST_MOYENNE
 DC.W 3;res ST MOYENNE
 DC.W 0;modecode
 DC.W 640,200
 DC.W 60

TAB_LISTE_RES_ST_16:
 DC.L 0
 DC.W 0
 DC.L RES_ST_BASSE
 DC.W 2;res ST BASSE
 DC.W 0;modecode
 DC.W 320,200
 DC.W 60

TAB_LISTE_RES_MONO_TT_2:
 DC.L 0
 DC.W 0
 DC.L RES_TT_HAUTE
 DC.W 8;res TT HAUTE
 DC.W 0;modecode
 DC.W 1280,960
 DC.W 60

TAB_LISTE_RES_VGA_TT_2:
 DC.L 0
 DC.W 0
 DC.L RES_ST_HAUTE
 DC.W 4;res ST HAUTE
 DC.W 0;modecode
 DC.W 640,400
 DC.W 70

TAB_LISTE_RES_VGA_TT_4:
 DC.L 0
 DC.W 0
 DC.L RES_ST_MOYENNE
 DC.W 3;res ST MOYENNE
 DC.W 0;modecode
 DC.W 640,200
 DC.W 60

TAB_LISTE_RES_VGA_TT_16:
 DC.L TAB_LISTE_RES_VGA_TT_16+20
 DC.W 0
 DC.L RES_ST_BASSE
 DC.W 2;res ST BASSE
 DC.W 0;modecode
 DC.W 320,200
 DC.W 60
 DC.L 0
 DC.W 0
 DC.L RES_TT_MOYENNE
 DC.W 6;res TT MOYENNE
 DC.W 0;modecode
 DC.W 640,480
 DC.W 60

TAB_LISTE_RES_VGA_TT_256:
 DC.L 0
 DC.W 0
 DC.L RES_TT_BASSE
 DC.W 9;res TT BASSE
 DC.W 0;modecode
 DC.W 320,480
 DC.W 60

TAB_LISTE_RES_VGA_FALCON_2:
 DC.L TAB_LISTE_RES_VGA_FALCON_2+20
 DC.W 0
 DC.L RES_640_240
 DC.W 5;res FALCON
 DC.W $118;modecode
 DC.W 640,240
 DC.W 60
 DC.L TAB_LISTE_RES_VGA_FALCON_2+20*2
 DC.W 0
 DC.L RES_ST_HAUTE
 DC.W 5;res FALCON
 DC.W $98;modecode
 DC.W 640,400
 DC.W 60
 DC.L 0
 DC.W 0
 DC.L RES_640_480
 DC.W 5;res FALCON
 DC.W $18;modecode
 DC.W 640,480
 DC.W 60

TAB_LISTE_RES_VGA_FALCON_4:
 DC.L TAB_LISTE_RES_VGA_FALCON_4+20
 DC.W 0
 DC.L RES_320_240
 DC.W 5;res FALCON
 DC.W $111;modecode
 DC.W 320,240
 DC.W 60
 DC.L TAB_LISTE_RES_VGA_FALCON_4+20*2
 DC.W 0
 DC.L RES_320_480
 DC.W 5;res FALCON
 DC.W $11;modecode
 DC.W 320,480
 DC.W 60
 DC.L TAB_LISTE_RES_VGA_FALCON_4+20*3
 DC.W 0
 DC.L RES_ST_MOYENNE
 DC.W 5;res FALCON
 DC.W $199;modecode
 DC.W 640,200
 DC.W 60
 DC.L TAB_LISTE_RES_VGA_FALCON_4+20*4
 DC.W 0
 DC.L RES_640_240
 DC.W 5;res FALCON
 DC.W $119;modecode
 DC.W 640,240
 DC.W 60
 DC.L 0
 DC.W 0
 DC.L RES_640_480
 DC.W 5;res FALCON
 DC.W $19;modecode
 DC.W 640,480
 DC.W 60

TAB_LISTE_RES_VGA_FALCON_16:
 DC.L TAB_LISTE_RES_VGA_FALCON_16+20
 DC.W 0
 DC.L RES_ST_BASSE
 DC.W 5;res FALCON
 DC.W $192;modecode
 DC.W 320,200
 DC.W 60
 DC.L TAB_LISTE_RES_VGA_FALCON_16+20*2
 DC.W 0
 DC.L RES_320_240
 DC.W 5;res FALCON
 DC.W $112;modecode
 DC.W 320,240
 DC.W 60
 DC.L TAB_LISTE_RES_VGA_FALCON_16+20*3
 DC.W 0
 DC.L RES_320_480
 DC.W 5;res FALCON
 DC.W $12;modecode
 DC.W 320,480
 DC.W 60
 DC.L TAB_LISTE_RES_VGA_FALCON_16+20*4
 DC.W 0
 DC.L RES_640_240
 DC.W 5;res FALCON
 DC.W $11A;modecode
 DC.W 640,240
 DC.W 60
 DC.L 0
 DC.W 0
 DC.L RES_640_480
 DC.W 5;res FALCON
 DC.W $1A;modecode
 DC.W 640,480
 DC.W 60

TAB_LISTE_RES_VGA_FALCON_256:
 DC.L TAB_LISTE_RES_VGA_FALCON_256+20
 DC.W 0
 DC.L RES_320_240
 DC.W 5;res FALCON
 DC.W $113;modecode
 DC.W 320,240
 DC.W 60
 DC.L TAB_LISTE_RES_VGA_FALCON_256+20*2
 DC.W 0
 DC.L RES_320_480
 DC.W 5;res FALCON
 DC.W $13;modecode
 DC.W 320,480
 DC.W 60
 DC.L TAB_LISTE_RES_VGA_FALCON_256+20*3
 DC.W 0
 DC.L RES_640_240
 DC.W 5;res FALCON
 DC.W $11B;modecode
 DC.W 640,240
 DC.W 60
 DC.L 0
 DC.W 0
 DC.L RES_640_480
 DC.W 5;res FALCON
 DC.W $1B;modecode
 DC.W 640,480
 DC.W 60

TAB_LISTE_RES_VGA_FALCON_32768:
 DC.L TAB_LISTE_RES_VGA_FALCON_32768+20
 DC.W 0
 DC.L RES_320_240
 DC.W 5;res FALCON
 DC.W $114;modecode
 DC.W 320,240
 DC.W 60
 DC.L 0
 DC.W 0
 DC.L RES_320_480
 DC.W 5;res FALCON
 DC.W $14;modecode
 DC.W 320,480
 DC.W 60

TAB_LISTE_RES_MONO_FALCON:
 DC.L 0
 DC.W 0
 DC.L RES_ST_HAUTE
 DC.W 5;res FALCON
 DC.W $88;modecode
 DC.W 640,400
 DC.W 70

TAB_LISTE_RES_TV_FALCON_2:
 DC.L TAB_LISTE_RES_TV_FALCON_2+20
 DC.W 0
 DC.L RES_640_200
 DC.W 5;res FALCON
 DC.W 8;modecode
 DC.W 640,200
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_2+20*2
 DC.W 0
 DC.L RES_ST_HAUTE
 DC.W 5;res FALCON
 DC.W $118;modecode
 DC.W 640,400
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_2+20*3
 DC.W 0
 DC.L RES_768_240
 DC.W 5;res FALCON
 DC.W $48;modecode
 DC.W 768,240
 DC.W 60
 DC.L 0
 DC.W 0
 DC.L RES_768_480
 DC.W 5;res FALCON
 DC.W $148;modecode
 DC.W 768,480
 DC.W 60

TAB_LISTE_RES_TV_FALCON_4:
 DC.L TAB_LISTE_RES_TV_FALCON_4+20
 DC.W 0
 DC.L RES_320_200
 DC.W 5;res FALCON
 DC.W 1;modecode
 DC.W 320,200
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_4+20*2
 DC.W 0
 DC.L RES_320_400
 DC.W 5;res FALCON
 DC.W $101;modecode
 DC.W 320,400
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_4+20*3
 DC.W 0
 DC.L RES_384_240
 DC.W 5;res FALCON
 DC.W $41;modecode
 DC.W 384,240
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_4+20*4
 DC.W 0
 DC.L RES_384_480
 DC.W 5;res FALCON
 DC.W $141;modecode
 DC.W 384,480
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_4+20*5
 DC.W 0
 DC.L RES_ST_MOYENNE
 DC.W 5;res FALCON
 DC.W $89;modecode
 DC.W 640,200
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_4+20*6
 DC.W 0
 DC.L RES_640_400
 DC.W 5;res FALCON
 DC.W $109;modecode
 DC.W 640,400
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_4+20*7
 DC.W 0
 DC.L RES_768_240
 DC.W 5;res FALCON
 DC.W $49;modecode
 DC.W 768,240
 DC.W 60
 DC.L 0
 DC.W 0
 DC.L RES_768_480
 DC.W 5;res FALCON
 DC.W $149;modecode
 DC.W 768,480
 DC.W 60

TAB_LISTE_RES_TV_FALCON_16:
 DC.L TAB_LISTE_RES_TV_FALCON_16+20
 DC.W 0
 DC.L RES_ST_BASSE
 DC.W 5;res FALCON
 DC.W $82;modecode
 DC.W 320,200
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_16+20*2
 DC.W 0
 DC.L RES_320_400
 DC.W 5;res FALCON
 DC.W $102;modecode
 DC.W 320,400
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_16+20*3
 DC.W 0
 DC.L RES_384_240
 DC.W 5;res FALCON
 DC.W $42;modecode
 DC.W 384,240
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_16+20*4
 DC.W 0
 DC.L RES_384_480
 DC.W 5;res FALCON
 DC.W $142;modecode
 DC.W 384,480
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_16+20*5
 DC.W 0
 DC.L RES_640_200
 DC.W 5;res FALCON
 DC.W $A;modecode
 DC.W 640,200
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_16+20*6
 DC.W 0
 DC.L RES_640_400
 DC.W 5;res FALCON
 DC.W $10A;modecode
 DC.W 640,400
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_16+20*7
 DC.W 0
 DC.L RES_768_240
 DC.W 5;res FALCON
 DC.W $4A;modecode
 DC.W 768,240
 DC.W 60
 DC.L 0
 DC.W 0
 DC.L RES_768_480
 DC.W 5;res FALCON
 DC.W $14A;modecode
 DC.W 768,480
 DC.W 60

TAB_LISTE_RES_TV_FALCON_256:
 DC.L TAB_LISTE_RES_TV_FALCON_256+20
 DC.W 0
 DC.L RES_320_200
 DC.W 5;res FALCON
 DC.W 3;modecode
 DC.W 320,200
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_256+20*2
 DC.W 0
 DC.L RES_320_400
 DC.W 5;res FALCON
 DC.W $103;modecode
 DC.W 320,400
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_256+20*3
 DC.W 0
 DC.L RES_384_240
 DC.W 5;res FALCON
 DC.W $43;modecode
 DC.W 384,240
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_256+20*4
 DC.W 0
 DC.L RES_384_480
 DC.W 5;res FALCON
 DC.W $143;modecode
 DC.W 384,480
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_256+20*5
 DC.W 0
 DC.L RES_640_200
 DC.W 5;res FALCON
 DC.W $B;modecode
 DC.W 640,200
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_256+20*6
 DC.W 0
 DC.L RES_640_400
 DC.W 5;res FALCON
 DC.W $10B;modecode
 DC.W 640,400
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_256+20*7
 DC.W 0
 DC.L RES_768_240
 DC.W 5;res FALCON
 DC.W $4B;modecode
 DC.W 768,240
 DC.W 60
 DC.L 0
 DC.W 0
 DC.L RES_768_480
 DC.W 5;res FALCON
 DC.W $14B;modecode
 DC.W 768,480
 DC.W 60

TAB_LISTE_RES_TV_FALCON_32768:
 DC.L TAB_LISTE_RES_TV_FALCON_32768+20
 DC.W 0
 DC.L RES_320_200
 DC.W 5;res FALCON
 DC.W 4;modecode
 DC.W 320,200
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_32768+20*2
 DC.W 0
 DC.L RES_320_400
 DC.W 5;res FALCON
 DC.W $104;modecode
 DC.W 320,400
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_32768+20*3
 DC.W 0
 DC.L RES_384_240
 DC.W 5;res FALCON
 DC.W $44;modecode
 DC.W 384,240
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_32768+20*4
 DC.W 0
 DC.L RES_384_480
 DC.W 5;res FALCON
 DC.W $144;modecode
 DC.W 384,480
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_32768+20*5
 DC.W 0
 DC.L RES_640_200
 DC.W 5;res FALCON
 DC.W $C;modecode
 DC.W 640,200
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_32768+20*6
 DC.W 0
 DC.L RES_640_400
 DC.W 5;res FALCON
 DC.W $10C;modecode
 DC.W 640,400
 DC.W 60
 DC.L TAB_LISTE_RES_TV_FALCON_32768+20*7
 DC.W 0
 DC.L RES_768_240
 DC.W 5;res FALCON
 DC.W $4C;modecode
 DC.W 768,240
 DC.W 60
 DC.L 0
 DC.W 0
 DC.L RES_768_480
 DC.W 5;res FALCON
 DC.W $14C;modecode
 DC.W 768,480
 DC.W 60

TAB_SLIDER_RES:
 DC.W BOXRES,BHAUT,BBAS,SLIDER,BSLIDER
TAB_CHOIX_RES:
 DC.W RES1,RES2,RES3,RES4,RES5,RES6,RES7,RES8,RES9,RES10

TAB_ATI_DEVICES:
 DC.W PCI_CHIP_RADEON_LY, PCI_CHIP_RADEON_LZ
;Radeon VE/7000
 DC.W PCI_CHIP_RV100_QY, PCI_CHIP_RV100_QZ
;Radeon IGP320M (U1)
 DC.W PCI_CHIP_RS100_4336
;Radeon IGP320 (A3)
 DC.W PCI_CHIP_RS100_4136
;IGP330M/340M/350M (U2)
 DC.W PCI_CHIP_RS200_4337
;IGP330/340/350 (A4)
 DC.W PCI_CHIP_RS200_4137
;Mobility 7000 IGP
 DC.W PCI_CHIP_RS250_4437
;7000 IGP (A4+)
 DC.W PCI_CHIP_RS250_4237
;8500 AIW
 DC.W PCI_CHIP_R200_BB, PCI_CHIP_R200_BC
;8700/8800
 DC.W PCI_CHIP_R200_QH
;8500
 DC.W PCI_CHIP_R200_QL
;9100
 DC.W PCI_CHIP_R200_QM
;Mobility M7
 DC.W PCI_CHIP_RADEON_LW, PCI_CHIP_RADEON_LX
;7500
 DC.W PCI_CHIP_RV200_QW, PCI_CHIP_RV200_QX
;Mobility M9
 DC.W PCI_CHIP_RV250_Ld, PCI_CHIP_RV250_Le, PCI_CHIP_RV250_Lf, PCI_CHIP_RV250_Lg
;9000/Pro
 DC.W PCI_CHIP_RV250_If, PCI_CHIP_RV250_Ig
;Mobility 9100 IGP (U3)
 DC.W PCI_CHIP_RS300_5835, PCI_CHIP_RS350_7835
;9100 IGP (A5)
 DC.W PCI_CHIP_RS300_5834, PCI_CHIP_RS350_7834
;Mobility 9200 (M9+)
 DC.W PCI_CHIP_RV280_5C61, PCI_CHIP_RV280_5C63
;9200
 DC.W PCI_CHIP_RV280_5960, PCI_CHIP_RV280_5961, PCI_CHIP_RV280_5962, PCI_CHIP_RV280_5964
;9500
 DC.W PCI_CHIP_R300_AD, PCI_CHIP_R300_AE
;9600TX / FireGL Z1
 DC.W PCI_CHIP_R300_AF, PCI_CHIP_R300_AG
;9700/9500/Pro/FireGL X1
 DC.W PCI_CHIP_R300_ND, PCI_CHIP_R300_NE, PCI_CHIP_R300_NF, PCI_CHIP_R300_NG
;Mobility M10/M11
 DC.W PCI_CHIP_RV350_NP, PCI_CHIP_RV350_NQ, PCI_CHIP_RV350_NR, PCI_CHIP_RV350_NS, PCI_CHIP_RV350_NT, PCI_CHIP_RV350_NV
;9600/FireGL T2
 DC.W PCI_CHIP_RV350_AP, PCI_CHIP_RV350_AQ, PCI_CHIP_RV360_AR, PCI_CHIP_RV350_AS, PCI_CHIP_RV350_AT, PCI_CHIP_RV350_AV
;9800/Pro/FileGL X2
 DC.W PCI_CHIP_R350_AH, PCI_CHIP_R350_AI, PCI_CHIP_R350_AJ, PCI_CHIP_R350_AK
 DC.W PCI_CHIP_R350_NH, PCI_CHIP_R350_NI, PCI_CHIP_R360_NJ, PCI_CHIP_R350_NK
;Newer stuff
 DC.W  PCI_CHIP_RV380_3E50, PCI_CHIP_RV380_3E54, PCI_CHIP_RV380_3150, PCI_CHIP_RV380_3154, PCI_CHIP_RV370_5B60
 DC.W  PCI_CHIP_RV370_5B62, PCI_CHIP_RV370_5B64, PCI_CHIP_RV370_5B65, PCI_CHIP_RV370_5460, PCI_CHIP_RV370_5464
 DC.W  PCI_CHIP_R420_JH, PCI_CHIP_R420_JI, PCI_CHIP_R420_JJ, PCI_CHIP_R420_JK, PCI_CHIP_R420_JL, PCI_CHIP_R420_JM 
 DC.W  PCI_CHIP_R420_JN, PCI_CHIP_R420_JP, PCI_CHIP_R423_UH, PCI_CHIP_R423_UI, PCI_CHIP_R423_UJ, PCI_CHIP_R423_UK
 DC.W  PCI_CHIP_R423_UQ, PCI_CHIP_R423_UR, PCI_CHIP_R423_UT, PCI_CHIP_R423_5D57
 ;Original Radeon/7200
 DC.W PCI_CHIP_RADEON_QD, PCI_CHIP_RADEON_QE, PCI_CHIP_RADEON_QF, PCI_CHIP_RADEON_QG
 DC.W 0

COUL_2:    DC.B "    2",0
COUL_4:    DC.B "    4",0
COUL_16:   DC.B "   16",0
COUL_256:  DC.B "  256",0
COUL_65536:DC.B "65536",0
COUL_16M:  DC.B "  16M",0

RES_ST_BASSE:  DC.B " 320 * 200, ST basse",0
RES_ST_BASSE_E: DC.B " 320 * 200, ST low",0
RES_ST_MOYENNE:DC.B " 640 * 200, ST moyenne",0
RES_ST_MOYENNE_E:DC.B " 640 * 200, ST middle",0
RES_ST_HAUTE:  DC.B " 640 * 400, ST haute",0
RES_ST_HAUTE_E:  DC.B " 640 * 400, ST height",0
RES_ST_NTC:    DC.B " 640 * 400, 63 Hz 28 KHz multisync",0
RES_ST_NTC_CT2:DC.B " 640 * 400, 71 Hz 31,5 KHz",0
RES_TT_BASSE:  DC.B " 320 * 480, TT basse",0
RES_TT_BASSE_E:  DC.B " 320 * 480, TT low",0
RES_TT_MOYENNE:DC.B " 640 * 480, TT moyenne",0
RES_TT_MOYENNE_E:DC.B " 640 * 480, TT middle",0
RES_TT_HAUTE:  DC.B "1280 * 960, TT haute",0
RES_TT_HAUTE_E:  DC.B "1280 * 960, TT height",0
RES_320_200:   DC.B " 320 * 200",0
RES_320_240:   DC.B " 320 * 240",0
RES_320_400:   DC.B " 320 * 400",0
RES_320_480:   DC.B " 320 * 480",0
RES_384_240:   DC.B " 384 * 240",0
RES_384_480:   DC.B  "384 * 480",0
RES_640_200:   DC.B " 640 * 200",0
RES_640_240:   DC.B " 640 * 240",0
RES_640_400:   DC.B " 640 * 400",0
RES_640_480:   DC.B " 640 * 480",0
RES_768_240:   DC.B " 768 * 240",0
RES_768_480:   DC.B " 768 * 480",0

NOM_RSC:DC.B "CHGRES.RSC",0
SHUTDOWN:DC.B "SHUTDOWN.PRG",0

MAGX_INF:DC.B "A:\MAGX.INF",0
RES_INF:DC.B "#_DEV",0

MESS1:DC.B "[1][Pas assez |de m‚moire !][Annuler]",0
MESS1E:DC.B "[1][Out of memory !][Cancel]",0
MESS2:DC.B "[1][Horloge externe 38MHz|non d‚tect‚e][Annuler]",0
MESS2E:DC.B "[1][External clock 38MHz|not detected][Cancel]",0
MESS3:DC.B "[1][La plus proche r‚solution est|",0
MESS3E:DC.B "[1][Nearest screen possible is|",0
MESS3B:DC.B "][OK]",0

 ALIGN.W 

 DATA
GLOBAL:
APVERSION:DC.W 0
APCOUNT:DC.W 0
AP_ID:DC.W 0
APPRIVATE:DC.L 0
APPTREE:DC.L 0
AP1RESV:DC.L 0
AP2RESV:DC.L 0
AP3RESV:DC.L 0
AP4RESV:DC.L 0
WORK_IN:DC.W 1,1,1,1,1,1,1,1,1,1,2
 BSS
AESPTR:DC.L 0
VDIPTR:DC.L 0
AESPB:DS.L 6
VDIPB:DS.L 5
CONTRL:
OPCODE:DC.W 0
SINTIN:DC.W 0
SINTOUT:DC.W 0
SADDRIN:DC.W 0
SADDROUT:DC.W 0
        DS.W 7
HANDLE:DS.W 1
GR_HANDLE:DS.W 1
GR_HWCHAR:DS.W 1
GR_HHCHAR:DS.W 1
GR_HWBOX:DS.W 1
GR_HHBOX:DS.W 1
INTIN:DS.W 128
PTSIN:DS.W 256
INTOUT:DS.W 384
PTSOUT:DS.W 128
ADDRIN:DS.W 128
ADDROUT:DS.W 128
WORK_OUT:DS.W 57
MFDB_SOURCE_DIAL:DS.W 10
MFDB_DEST_DIAL:DS.W 10
FORM1:DS.L 1
WINDFORM1:DS.L 1
D_FRA:DS.W 1
D_OK:DS.W 1
D_ATI:DS.W 1
STRINGS:DS.L 1
TAB_ARBRES:DS.L 1
NB_ARBRES:DS.W 1
VIDEO:DS.W 1
PLANS:DS.W 1
SAUVE_PLANS:DS.W 1
MONITEUR:DS.W 1
REZ:DS.W 1
MODECODE:DS.W 1
MIN_PLANS:DS.W 1
MAX_PLANS:DS.W 1
LISTE_RES:DS.L 1
NB_RES:DS.W 1
TAB_LISTE_RES_PICDESK:DS.W 10*MAX_RES
TEXTES_RES_PICDESK:DS.B 36*MAX_RES
BUFFER_DTA:DS.B 44
TMP_MESS:DS.B 256
 END
            