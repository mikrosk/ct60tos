Coldfire Targets
================

There are 3 Coldfire targets:
M5484LITE tested (Coldfire v4e 200 MHz) and use:
 - Timers
 - Serial port
 - CAN for IKBD with a special version of Eiffel
 - Ethernet 10/100
 - USB device
 - PCI: USB / Radeon (USB support mouse & keyboard, and mass storage) with plug & play feature.
 - CompactFlash
 - DMA
 - MMU
 - AC97 Sound (need hardware).
(Makefile: -DCOLDFIRE)
M54455EVB untested (Coldfire v4m 266 MHz) and use:
 - Timers
 - Serial port
 - Serial port for Atari IKBD
 - Ethernet 10/100
 - PCI: USB / Radeon
 - ATA
 - DMA
 - MMU
(Makefile: -DCOLDFIRE -DMCF5445X)
FIREBEE (Coldfire V4e 266 MHz) and use:
 - Timers and MFP (FPGA emulation)
 - Serial ports (MFP FPGA emulation and PSC0)
 - Serial port for IKBD with Eiffel
 - ACIA for original IKBD (FPGA emulation)
 - ACIA for MIDI (FPGA emulation)
 - Ethernet 10/100
 - PCI: USB / Radeon (USB support mouse & keyboard, and mass storage) with plug & play feature.
 - CompactFlash (FPGA emulation)
 - SD-Card (using DSPI)
 - Atari Falcon IDE / SCSI (FPGA emulation, SCSI not implemented)
 - DMA
 - MMU
 - PSG (YAMAHA - FPGA emulation)
 - Atari Floppy (FPGA emulation, only reading works)
 - RTC (PIC & FPGA emulation)
 - Videl ACP extended modes with EDID probing (monitor detection)
 - AC97 Sound.
(Makefile: -DCOLDFIRE -DMCF547X)


Firebee Status:
===============
- Ports:
  * ATARI SERIAL / SERIAL 1 (MFP) bugged (lost characters, FPGA bug normally, TOS use original routines).
  * HIGHSPEED SERIAL / SERIAL 2 (SCC) replaced by PSC0 (Coldfire) works fine.
  * MIDI not tested.
  * MIC (mono) not tested.
  * SOUND IN has some noise with original on board 5V voltage.
  * SOUND OUT works.
  * ATARI KEYBOORD works fine.
  * PS/2 for keyboard and mouse not tested, need a PIC update.
  * POWER CONNECTOR 1.5 A seems a minimum (lot of peoples has destroyed adapters).
  * GAME PORT not tested.
  * PRINTER PORT not tested.
  * ROM PORT not tested.
  * FLOPPY works only for reading (FPGA emulation problem).
  * SCSI not implemented inside the FPGA.
  * ACSI not tested, can't work on TOS404.
  * IDE works with a short cable.
  * COMPACTFLASH works in IDE mode.
  * SD-CARD works fine in SPI mode.
  * PCI works fine with a Radeon board, warning if you use on-board voltages !
  * ETHERNET 10/100 works fine.
  * DVI-I works but not with all monitors, impossible to set HSYNC (signal inverted) 
    like EDID protocol infos (else signal is lost). Video modes are like the Radeon 
    (in 256 / 65K /16M colors) excepted than there are no hardware accelerationn (original
    VDI need a blitter under the TOS 404). 
  * USB works only with low speed device (mouse and keyboard)…if the 3V3 voltage on board is fixed.
    High speed devices seems works with a PCI bus load with a Radeon board (for example).
- Devices:
  * AC97 audio codec not works on a 2nd init, but works from an hardware reset to the codec (maybe a 
    problem with thhe Coldfire himself), so you need to replace the BAS by dBUG if you want sound
    because the BAS already use the audio codec.
    Sound is GSXB XBIOS compatible and has also and hardware STE emulation.
  * There are an internal driver with a fix for IDE/CompactFlash (Rwabs and XHDI routines), with 
    verification on read and retry loop because sometimes the 1st long access is lost under MiNT.
    The internal driver runs only after all IDE/SCSI disk scan and if no bootable disk load an external
    driver. BDOS replace the GEMDOS, in theory 1GB partitions TOS (16KB sectors) or DOS works.
    It's possible to swap IDE and CompactFlash by software (flash parameter with the CPX), but the
    TOS internal driver can use 4 IDE devices.
  * Ethernet under TOS is compatible with Gluestick.
 - Compatibility:
   The FPGA hardware emulation is not complete, there are no DSP, no Blitter, no SCC, and no DMA
   sound, else in theory it's a Falcon:
   * VIDEL works with extended modes.
   * RTC/NVRAM works.
   The TOS use the CF68KLIB for emulate a 68060, but some instructions (lot of in Pure C programs)
   can create problems because for fix it you need a full emulation (like Aranym or another emulator),
   the TOS test Pure C programs and try to replace theses instructions (for exemple push or pop a byte 
   on stack use a word on a 68K):
   * Line A 0xA000-0xA00F already used for mac instructions replaced by opcode 0xA920-0xA92F.
   * move.b DX,-(SP) replaced by opcode 0xA910-0xA917.
   * move.b (SP)+,DX replaced by opcode 0xA918-0xA91F.
   * move.b (AX),-(SP) replaced by opcode 0xA930-0xA937.
   * move.b (SP)+,(AX) replaced by opcode 0xA938-0xA93F.
   * move.b d(AX),-(SP) replaced by opcode 0xA9B0-0xA9B7.
   * move.b (SP)+,d(AX) replaced by opcode 0xA9B8-0xA9BF.
   * move.b abs.l,-(SP) replaced by opcode 0xA9F1.
   * move.b d(PC),-(SP) replaced by opcode 0xA9F2.
   * move.b (SP)+,abs.l replaced by opcode 0xA9F9.
   * mulu/s.l ea,dh:dl replaced by opcode 0xABC0-0xABFF.
   * divu/s.l ea:dr:dq replaced by opcode 0xAFC0-0xAFFF.
   There are no emulation for the FPU.
    

Load TOS
========

- For load firetos_m5484lite.hex (the TOS) with an host TFTP server with dBUG cmds:
 The 1st time, set TFTP vars (for example):
 * set server 192.168.1.1 (host IP server)
 * set client 192.168.1.2 (M5484LITE/M5485EVB IP)
 * set filename /home/firetos_m5484lite.hex
 * set filetype S-Record
 And also: 
 * set baud 19200
 After just use:
 * dn -o 1000000
 * fl w ff900000 900000 f0000
 * go ff900000 (or go)
 or if jou want preserve flash:
 * dn -o 1000000
 * go 900000 (or go)
 
- For load firetos_firebee.hex (the TOS) with an host TFTP server with dBUG cmds:
 The 1st time, set TFTP vars (for example):
 * set server 192.168.1.1 (host IP server)
 * set client 192.168.1.2 (FIREBEE IP)
 * set filename /home/firetos_firebee.hex
 * set filetype S-Record
 And also: 
 * set baud 19200
 After just use:
 * dn -o 20000000
 * fl w E0400000 400000 f0000
 * go E0400000 (or go)
 or if jou want preserve flash:
 * dn -o 20000000
 * go 4000000 (or go)
 
 NOTE: In the current state because the network part use dBUG settings, ethernet not works if the BAS start the TOS.
 WARNING: The ethernet part of dBUG need a clock on the PHY, so if the FLASH above 0xE7000000 is destroyed ethernet can't work! 
 NOTE2: If the BAS is installed, it's possible to use ethernet without dBUG with some limitations (3 flash parameters used) :
  * You can change only the 3 lastest bytes of the MAC address with the CPX (stop/misc menu), begin is 00:CF:54
  * You can change board IP and host IP with the CPX (stop/misc menu).
  * The netmask is automatic if the choice is CPX setting.
  * The default gateway is 0.0.0.0.
  * The default path/filename for TFTP is /home/firebee.hex.
  * If the board IP address is at 0.0.0.0 or 255.255.255.255 dBUG setting are used for board IP / gateway / netmask / path/filename.
  * If the host IP address is at 0.0.0.0 or 255.255.255.255 dBUG setting are used for host IP.
  * If the 3 last bytes of MAC address are 00:00:00 or FF:FF:FF dBUG setting are used.  

 
Build config
============

- pci/include/config.h:
#define LWIP:
 Enable lwIP TCP/IP stack, FreeRTOS real time kernel, and USB device on M5484LITE/M5485EVB (Mass Storage).
 Enable WEB server, TFTP server/client, FTP server, TCP/IP stack interface for TOS (STiK cookie).
 Enable Telnet and Shell on serial port if the serial mouse isn't connected for TOS.

- TOS use the CF68KLIB for decode unimplemented 68K instructions and addressing modes.
  TOS runs always with user stack and privilege instructions are handled by the CF68KLIB. 
 

LWIP and FreeRTOS commands
==========================
Excepted debug commands, it's also possible to use these commands with Telnet.

 Command Description               Syntax
      cb Clear Breakpoint          cb <index>
      db Define Breakpoint         db <addr> <-c|t value> <-r addr..> <-i> <-m>
      dm Display Memory            dm begin <end>
     dis Disassemble               dis <addr>
      dr Display Registers CF68KLIB dr
      go Execute, Insert Breakpt   go
      lb List Breakpoints          lb
      pm Patch Memory              pm addr <data>
      qt Query Tasks               qt
      st Single Step (after db)    st <count>
     cat Concatenate File(s)       cat file(s)
   chdir Change Directory          chdir dir
   chmod Change Attibutes          chmod filename attributes
      cp Copy File                 cp source dest
      ls List Directory            ls <dir>
   mkdir Make Directory            mkdir dir
      mv Rename File               mv source dest
      rm Remove File               rm file
   rmdir Remove Directory          rmdir dir
     arp Address Resol. Protocol   arp <-a> <host>
ifconfig Interface Configuration   ifconfig <-a> <interface> ...
    ping Ping                      ping <-n echos> <-w delay> host
 netstat Network Stats             netstat
   cache Cache                     cache on/off
   debug Debug CF68KLIB            debug on/off <count (0:infinite)>
   inter Interrupts CF68KLIB       inter <on/off/abort>
   reset System Reset              reset
    trap Traps CF68KLIB            trap on/off <count (0:infinite)>
    help Help                      help <cmd>

> qt
Name            TID     Prio    Status  Sys/User Stack  #
------------------------------------------------------------
ROOT            F1006C  0A      Ready   3987/NU/4096    0
IDLE            F141D0  00      Ready   4067/NU/4096    1
lwIP0           F18510  1E      Blocked 3977/NU/4096    2
lwIP1           F1C750  1E      Suspend 4003/NU/4096    3
TELNETd         F208B4  0F      Suspend 3998/NU/4096    4
FTPd            F26EDC  0A      Blocked 4000/NU/4096    5
TFTPd           F2B040  0A      Suspend 3944/NU/4096    6
HTTPd           F2F1A4  0A      Suspend 4024/NU/4096    7
TOS             F33308  05      Ready   4073/NU/4096    8
DBUG            F3746C  14      Ready   3004/NU/4096    9
HMES            F3BCF0  0A      Ready   4004/NU/4096    10
HT01            F3FF58  09      Suspend 3981/NU/4096    11
HT02            F440BC  09      Suspend 3981/NU/4096    12
HT03            F48220  09      Suspend 3981/NU/4096    13
HT04            F4C384  09      Suspend 3981/NU/4096    14
HT05            F504E8  09      Suspend 3981/NU/4096    15
USBT            F54D08  06      Ready   4035/NU/4096    16
USBd            F591D0  1F      Suspend 3003/NU/4096    17
=> qt command displays FreeRTOS tasks, the TOS himself is a task.
   Only the TOS use the CF68KLIB.

> inter
int
NATIVE/RTOS     CF68KLIB/TOS    LEV     PRI     INTERRUPTS
OFF             OFF             1       0       Edge port 1 Int(65)
OFF             OFF             2       0       Edge port 2 Int(66)
OFF             OFF             3       0       Edge port 3 Int(67)
OFF             OFF             4       0       Edge port 4 Int(68)
OFF             OFF             5       0       Edge port 5 Int(69)
OFF             OFF             6       0       Edge port 6 Int(70)
OFF             OFF             7       0       Edge port 7 Int(71)
ON              ON              5       5       USB 2.0 Int(79)
ON              ON              5       6       USB 2.0 Int(80)
ON              ON              5       7       USB 2.0 Int(81)
ON              ON              3       0       USB 2.0 Int(82)
ON              ON              3       1       USB 2.0 Int(83)
ON              ON              3       2       USB 2.0 Int(84)
ON              ON              3       3       USB 2.0 Int(85)
ON              ON              3       4       USB 2.0 Int(86)
ON              ON              3       5       USB 2.0 Int(87)
OFF             OFF             3       6       USB 2.0 Int(88)
OFF             OFF             0       0       DSPI Int(89)
OFF             OFF             0       0       DSPI Int(90)
OFF             OFF             0       0       DSPI Int(91)
OFF             OFF             0       0       DSPI Int(92)
OFF             OFF             0       0       DSPI Int(93)
OFF             OFF             0       0       DSPI Int(94)
OFF             OFF             0       0       DSPI Int(95)
OFF             OFF             0       0       PSC3 Int(96)
OFF             OFF             0       0       PSC2 Int(97)
OFF             OFF             0       0       PSC1 Int(98)
OFF             ON              6       5       PSC0 Int(99)
OFF             OFF             0       0       Comm Timer Int(100)
OFF             OFF             0       0       SEC Int(101)
OFF             OFF             0       0       FEC1 Int(102)
ON              ON              5       1       FEC0 Int(103)
OFF             OFF             0       0       I2C Int(104)
OFF             OFF             0       0       PCIARB Int(105)
OFF             OFF             0       0       CBPCI Int(106)
OFF             OFF             0       0       XLBPCI Int(107)
ON              ON              7       7       XLBARB Int(111)
ON              ON              6       0       DMA Int(112)
OFF             OFF             0       0       CAN0 ERROR Int(113)
OFF             OFF             0       0       CAN0 BUSOFF Int(114)
OFF             OFF             0       0       CAN0 MBOR Int(115)
OFF             OFF             0       0       SLT1 Int(117)
ON              ON              6       7       SLT0 Int(118)
OFF             ON              6       4       CAN1 ERROR Int(119)
OFF             ON              6       4       CAN1 BUSOFF Int(120)
OFF             ON              6       4       CAN1 MBOR Int(121)
OFF             OFF             0       0       GPT3 Int(123)
OFF             OFF             0       0       GPT2 Int(124)
OFF             OFF             0       0       GPT1 Int(125)
OFF             OFF             0       0       GPT0 Int(126)
=> By default TOS interrupts not works without CF68KLIB (excepted the TOS himself),
   so these interrupts are disabled out of the TOS task:
   MCF5484: PSC0 (serial) CAN1 (ikbd) and GPT timers (MFP).
   MCF5474: PSC0 (serial) PSC1 (ikbd) and GPT timers (MFP).
   
LWIP socket cookie 'SOCK':
--------------------------
typedef struct socket_cookie
{
  long version; /* 0x0101 for example */
  long magic; /* 'SOCK' */
  int (*socket)(int domain, int type, int protocol);
  int (*bind)(int s, struct sockaddr *name, socklen_t namelen);
  int (*listen)(int s, int backlog);
  int (*accept)(int s, struct sockaddr *addr, socklen_t *addrlen);
  int (*connect)(int s, struct sockaddr *name, socklen_t namelen);
  int (*write)(int s, void *dataptr, int size);
  int (*send)(int s, void *dataptr, int size, unsigned int flags);
  int (*sendto)(int s, void *dataptr, int size, unsigned int flags, struct sockaddr *to, socklen_t tolen);
  int (*read)(int s, void *mem, int len);
  int (*recv)(int s, void *mem, int len, unsigned int flags);
  int (*recvfrom)(int s, void *mem, int len, unsigned int flags, struct sockaddr *from, socklen_t *fromlen);
  int (*shutdown)(int s, int how);
  int (*close)(int s);
  int (*getsockname)(int s, struct sockaddr *name, socklen_t *namelen);
  int (*getpeername)(int s, struct sockaddr *name, socklen_t *namelen);
  int (*getsockopt)(int s, int level, int optname, void *optval, socklen_t *optlen);
  int (*setsockopt)(int s, int level, int optname, const void *optval, socklen_t optlen);
  int (*select)(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset, struct timeval *timeout);
  int (*ioctlsocket)(int s, long cmd, void *argp);
  struct hostent *(*gethostbyname)(const char *name);
  int (*geterrno)(void);
} SOCKET_COOKIE;

'STiK' cookie is also implemented with GlueSTiK.


XBIOS notes
===========
 
- Flash parameter CT60_PARAM_TOSRAM has no effect, TOS is always in RAM.
- Flash parameter CT60_BLITTER_SPEED has no effect, there are no blitter ;-)
- Flash parameter CT60_CPU_FPU set/clear _FPU cookie, FPU isn't disabled.
- Flash parameter CT60_PARAM_OFFSET_TLV there are no temperature sensor on the Coldfire.
- Flash parameters CT60_ABE_CODE, CT60_SDR_CODE, CT60_CLOCK are not used.
- The TOS can use Flash parameters for replace the NVMRAM, and use Eiffel for the IKBD clock.

- New function ct60_vmalloc XBIOS 0xC60e: long Vmalloc(short mode, long value)
  with mode = 0, value <=> malloc size, return address or null if memory full.
       mode = 1, value <=> address of previous malloc.
       mode = 2, null value for init (normally never used).

- New modecodes for Vsetscreen, Vsetmode, Vgetsize:
/* modecode extended flags */
#define HORFLAG         0x200 /* double width */
#define HORFLAG2        0x400 /* width increased */
#define VESA_600        0x800 /* SVGA 600 lines */
#define VESA_768       0x1000 /* SVGA 768 lines */
#define VERTFLAG2      0x2000 /* double height */
#define VIRTUAL_SCREEN 0x8000 /* width * 2 and height * 2, 2048 x 2048 max */
#define BPS32 5
Actually only some combinations works in 256 / 65K / 16M colors:
 0                                              320x240
 VERTFLAG+VGA                                   320x240
 VGA+COL80                                      640x480
 VERTFLAG+COL80                                 640x480
 VESA_600+HORFLAG2+VGA+COL80                    800x600
 VESA_768+HORFLAG2+VGA+COL80                   1024x768
 VERTFLAG2+HORFLAG+VGA+COL80                   1280x960/1024
 VERTFLAG2+VESA_600+HORFLAG2+HORFLAG+VGA+COL80 1600x1200
OVERSCAN and PAL flags are used for select refresh frequency:
 OVERSCAN | PAL | Freq
 ---------+-----+-----
        0 |  0  | 56
        0 |  1  | 60
        1 |  0  | 70
        1 |  1  | 85
Note: The driver select the nearest mode selected by the XBIOS if this mode not exist !
=====

- Montype return
 * 1 for S-Video out
 * 2 for VGA
 * 3 for TV / composite
 * 4 for LCD
 * 5 for DVI


FIREBEE Notes (M5484LITE/M5485EVB comparison)
=============================================
- Booting changes with the M5484LITE/M5485EVB target are (boot2.S):
  * FEC1 removed.
  * GPIO lines.
  * Flash AMD/MX 8MB device AM29LV640D.
  * SDRAM 8 x K4H510438 (512Mbits).
  * FBCS1/2/3 for the FPGA (ATARI hardware emulation)
  * Clock at 266 MHz (fire.h)
- 2 x SRAM base location unchanged (0x20000000, cf68klib.S).
- MMU mapping (pmmu.C).
- Atari hardware F030 IDE/SCSI are available inside the TOS (boot2.S).
- CT60 flash parameters (xbios2.S).
- PSC1 or 68050 (from FPGA emulation) for Eiffel (CAN1 on M5484LITE/M5485EVB, xbios2.S)
- PCI Devices numbers, AD17 is the NEC USB Controller, AD18, AD19, AD20... actually for slots
  (7 maxi actually, pci_bios.S).
- Original XBIOS TOS functions available (xbios2.S):
  * Floprd
  * Flopwr
  * Flopfmt
  * Midiws
  * Flopver
  * Rsconf (MFP and PSC0):
    Index    0    1   2     3    4    5    6    7   8   9     10     11    12    13     14    15
    MFP  19200 9600 4800 3600 2400 2000 1800 1200 600 300    200    150   134   110     75    50
    PSC0 19200 9600 4800 3600 2400 2000 1800 1200 600 300 230400 115200 57600 38400 153600 76800
  * Giaccess
  * Offgibit 	
  * Ongibit
  * Dosound
  * Bconmap (6:MFP, 7:PSC0 who replace the SCC - default like a FALCON)
- Flash programming with web server (lwip/amd_flash.c, lwip/web.c).
- Driver for the AM79C874 10/100 Ethernet PHY (lwip/am79c874.c, lwip/fec.c).
- Second network interface (FEC1) removed (lwip/init.c).
- USB Slave Mass Storage Driver removed (lwip/init.c).
- SD-Card driver added (detxbios.S).
- Videl fVDI driver (without Blitter) with a 65K colors 640x480 or extendend modes in 
  256/65K/16M start if no Radeon is detected on PCI. 

=> Compressed TOS Mapped between 0xE0400000-0xE04FFFFF inside the flash, 
   and need to be called by the boot at 0xE0400000.
   The TOS unpacked by himself is finally between 0xE00000-0xEFFFFF and 0xFC0000-0xFEFFFF.
   of DBUG for start the TOS at 0xFF700000 (flash begins at 0xFF000000).
   Idea: We can put DBUG at 0xE0000000 and it can test the SW5 switch and start himself the TOS. 

- CT60CONF.CPX / flash parameters allows to swap IDE port (CompactFlash at 0xFFF00000 and IDE 
  at 0xFFF00040) and change the boot order on drives.
  
- Boot menu and rescue features:
  SW6 and SW5 are inside the cookie '_SWI':
  * B7: (1) SW6 DOWN, (0) SW6 UP
  * B6: (1) SW5 DOWN, (0) SW5 UP
  * B0: (1) rescue TOS started from 0xE0000000 (replace BAS or dBUG)
 SW6 up is the normal usage
 SW6 down allows to TOS to start FTP (build option), HTTP, TFTP servers and create a Ram-Disk 
     actually in B (this feature is also possible with dBUG at 0xE0000000).
 SW5 up is the normal usage for start the TOS at 0xE0400000 (same usage inside BAS or dBUG at 
     0xE0000000) and a boot menu has 2 choices TOS or EMUTOS (TOS by default).
 SW5 down is the rescue mode, TOS at 0xE0000000 continue to run and a boot menu displays 3 choices:
  * TOS404 (at 0xE0000000 - boot)   => TOS rescue (default choice)
  * EMUTOS (at 0xE0600000)
  * TOS404 (at 0xE0400000 - normal) => TOS to test
 IT'S IMPORTANT TO FLASH ONLY AT 0xE0000000 AN OFFICIAL STABLE RELEASE OF THE TOS (rescuetos.hex)
 OR CONTINUE TO USE DBUG OR BAS AT 0xE0000000.
 

Ram-disk & TFTP notes
=====================

- The system create a 8MB ram-disk and try to load a list of files stored inside
  a tftp.inf file. The drive is C or the first free logical drive if a CompactFlash works.
  For example, this is the content of the tftp.inf file:
newdesk.inf
deskicon.rsc
xcontrol.acc
ct60temp.acc
clock.cpx
system.cpx
system.inf
general6.cpx
colorvdi.cpx
wcolors.cpx
cookies.cpx
ct60conf.cpx
vdibench\vdibench.prg
vdibench\vdibench.rsc
aniplay.prg
aniplay.inf
cindy.mpg
 * The host directory is the same the dBUG config (/home/ for me ).
 * Subdirectory are possible (vdibench in my example), the subdirectory are created inside
   the ram-disk.
- You can write inside the ram-disk but it's not possible to send files to the tftp server.
 * The main problem is change the modecode of the screen (CT60CONF.CPX can change the video
   mode of the boot). The value of the modecode is here inside NEWDESK.INF:
   #E B8 05 01 1E 22 3D 00 00 00 00
                  ----- => this value is for 1280x1024x16M colors. 
- For send files to the TFTP server, there are a directory TFTPSEND in C where it's possible
  to put files.
  
  
M5484LITE/M5485EVB USB device - Mass Storage notes
==================================================

- Warning USB2 device of MCF548x has lot of bugs. Please see MCF5485DE.pdf.
- Mass Storage use the ram-disk but it's hard to fix FAT coherency between
  the host disk and the TOS:
  * A semaphore when DBOS calls are used cause a device not ready.
  * During boot when the TFTP fill the ram-disk, the USB disk mounted is write protected.
  * When the USB disk is connected (excepted during boot), the TOS cannot write to the 
    ram-disk (write protect). USB writes cause BIOS media change.
- If the fist line of tftp.inf is "USB", the boot wait an USB link with an host. Whe the disk is
  mounted (timeout 60 seconds), the user can fill the ram-disk. When the link is removed the boot
  process continue (AUTO folder launched). With USB2 it's faster to fill the ram-disk by Ethernet.
- Tested with success on iMac (OS9/OSX), Mac-Mini (PPC) and Visiosat TVT250 USB.


M5484LITE/M5485EVB CompactFlash notes
=====================================

- CompactFlash working need a CPLD programmed (please contact Logic sales at 
  product.sales@logicpd.com and request a license agreement).
- Driver is inside the TOS, you can use a boot TOS partition, a MSDOS & TOS combined (byte swapping),
  or a MSDOS partition (byte swapping). In the last case you don't need to install driver for get a 
  bootable partition (and you cannot). In normal case (TOS partition), because original MFP and IDE 
  port are mapped to SRAM, the driver installed get a timeout and go back to the TOS whe the internal
  driver start.
- There are some changes for get a BDOS working with MSDOS partitions, now the limits are :
  32768 clusters of 64 sectors (512 bytes) => 1GB (2097152 sectors in this example).
  MSDOS not use logical sectors like TOS where a logical sector is always a cluster size divided by two.


M54455EVB IDE notes
===================

- boot2.S contains code for MCF54455 ATA interface, but this target isn't tested.


USB driver notes
================
- USB ohci (1.1) support mouse, keyboard and mass-storage. Actually not in the same time.


Video driver notes
==================

- Radeon bugs to fix ?
 * force_measure_pll fVDI parameter not works with my card, the driver use default values.

- Lynx driver for M5485EVB (if no radeon is found) is actually untested.


fVDI TOS notes
==============

- The fVDI part inside the TOS is normally 100% compatible with the TOS and use his variables.
  So for example bezier lines, true type fonts are not supported.


Coldfire notes
==============

- MCF5445x has no FPU.

- MCF548x FPU isn't fully compatible with the MC68060, some addresing modes not works.
  Like integers because the variable length instruction model of the Coldfire works 
  between one an three 16 bits words, some case not works. But the main problem seems
  the fmovem instruction, like the integers pre-decrement end post-increment for save/restore
  registers on the stack not works. There are no FPU emulation inside the CF68KLIB.
 
- For fix LINEA problems (Coldfire use opcodes 0xAxxx for MAC instruction):
 * Use cookie A000 for a TOS call <=> dc.w 0xA000
 * Use trap #15 for a TOS call <=> dc.w 0xA000
 Exemple for use XCONTROL CT60: replace the 2nd 0xA000 found by 0x4E4F

- There are a difference when you push a byte on the stack, on the 68K SP is decremented by 2,
  on the Coldfire SP is decremented by 1 !
  => the Pure C memset() crash the system, we must change this code :
     move.b d0,-(a0)            by     move.b d0,-(a0)
     move.b d0,-(sp)  0x1f00   ====>   move.b d0,d2     0x1400
     move.w (sp)+,d2  0x341f           lsl.l #8,d2      0xe18a
     move.b d0,d2                      move.b d0,d2
 
- M5484LITE/M5485EVB MMU Mapping:
 00000000 - 00DF0000 : STRAM 14 MB (cache in writethrough)
 00E00000 - 00EFFFFF : TOS404 1 MB (write protected)
 00F00000 - 00F0FFFF : invalid (bus error)
 00F10000 - 00F9FFFF : USB descriptors memory, DMA from PCI (no cache) 
 00FA0000 - 00FBFFFF : PSEUDO-CARTRIDGE 128K (write protected)
 00FC0000 - 00FEFFFF : TOS404 192 KB (write protected)
 00FF0000 - 00FFFFFF : invalid (bus error)
 01000000 - 03FFFFFF : SDRAM 48 MB (cache in copyback)
 04000000 - 7FFFFFFF : invalid (bus error)
 80000000 - BFFFFFFF : PCI MEM (1024 MB)
 C0000000 - CFFFFFFF : CPLD invalid (bus error)
 D0000000 - DFFFFFFF : PCI I/O (256 MB)
 E0000000 - EFFFFFFF : CPLD (CompactFlash, IDE registers at 0xEA001800-0xEA00180F)
 F0000000 - FEFFFFFF : invalid (bus error) 
 FF000000 - FF01FFFF : MBAR coldfire (no cache)
 FF020000 - FF03FFFF : invalid (bus error) 
 FF040000 - FF04FFFF : MMU_BASE coldfire (no cache)
 FF050000 - FF7FFFFF : invalid (bus error) 
 FF800000 - FFBFFFFF : boot flash 4 MB (flash parameters at 0xFF9F0000)
 FFC00000 - FFEFFFFF : invalid (bus error)
 FFF00000 - FFF00FFF : SRAM 4096 bytes for fix IDE bus errors
 FFF01000 - FFFFEFFF : invalid (bus error)
 FFFFF000 - FFFFFFFF : SRAM 4096 bytes for fix bus errors with emulated instructions
 
- M54455EVB MMU Mapping:
 00000000 - 00DF0000 : STRAM 14 MB (cache in writethrough) MMU remapped from 0x40000000
 00E00000 - 00EFFFFF : TOS404 1 MB (write protected)
 00F00000 - 00F9FFFF : invalid (bus error)
 00FA0000 - 00FBFFFF : PSEUDO-CARTRIDGE 128K (write protected)
 00FC0000 - 00FEFFFF : TOS404 192 KB (write protected)
 00FF0000 - 00FFFFFF : invalid (bus error)
 01000000 - 0FFFFFFF : SDRAM 240 MB (cache in copyback) MMU remapped from 0x41000000
 10000000 - 7FFFFFFF : invalid (bus error)
 80000000 - 80003FFF : SRAM 16KB
 80004000 - 8FFFFFFF : invalid (bus error)
 90000000 - 90001FFF : ATA
 90002000 - 9FFFFFFF : invalid (bus error)
 A0000000 - AFFFFFFF : PCI MEM (256 MB)
 B0000000 - BFFFFFFF : PCI I/O (256 MB)
 C0000000 - C0FFFFFF : flash 16MB TOS start at C0000000 (flash parameters at 0xC0100000 - 128KB)
 C1000000 - C1001FFF : CPLD
 C1002000 - C1FFFFFF : invalid (bus error) 
 C2000000 - C2001FFF : FPGA
 C2002000 - FBFFFFFF : invalid (bus error) 
 FC000000 - FC0C7FFF : Coldfire Peripheral Space (no cache)
 FC0C8000 - FF03FFFF : invalid (bus error) 
 FF040000 - FF04FFFF : MMU_BASE coldfire (no cache)
 FF050000 - FFEFFFFF : invalid (bus error)
 FFF00000 - FFF01FFF : SRAM 8192 bytes for fix IDE bus errors remapped with MMU from 0x80006000
 FFF02000 - FFFFDFFF : invalid (bus error)
 FFFFE000 - FFFFFFFF : SRAM 8192 bytes for fix bus errors with emulated instructions remapped with MMU from 80007000

- FIREBEE MMU Mapping:
 00000000 - 00CF0000 : STRAM 13 MB (cache in writethrough)
 00D00000 - 00DFFFFF : Mirror FPGA 1MB VIDEO RAM (cache in writethrough)
 00E00000 - 00EFFFFF : TOS404 1 MB (write protected)
 00F00000 - 00F01FFF : Mirror FPGA - ATARI IDE (8K)
 00F02000 - 00F0FFFF : invalid (bus error)
 00F10000 - 00F9FFFF : USB descriptors memory, DMA from PCI (no cache)
 00FA0000 - 00FBFFFF : invalid (bus error)
 00FC0000 - 00FEFFFF : TOS404 192 KB (write protected)
 00FF0000 - 00FF7FFF : invalid (bus error) 
 00FF8000 - 00FFFFFF : Mirror FPGA - ATARI I/O (32K - no cache)
 01000000 - 1FFFFFFF : SDRAM 496 MB (cache in copyback)
 20000000 - 3FFFFFFF : invalid (bus error)
 40000000 - 7FFFFFFF : FPGA FBCS4 VIDEO RAM
 80000000 - BFFFFFFF : PCI MEM (1024 MB)
 C0000000 - CFFFFFFF : invalid (bus error)
 D0000000 - DFFFFFFF : PCI I/O (256 MB)
 E0000000 - E07FFFFF : FBCS0 flash 8 MB (flash parameters at 0xE04F0000)
 E0800000 - EFFFFFFF : invalid (bus error) 
 F0000000 - F7FFFFFF : FPGA FBCS2 ACP I/O
 F8000000 - FBFFFFFF : FPGA FBCS3 SRAM
 FC000000 - FEFFFFFF : invalid (bus error) 
 FF000000 - FF01FFFF : MBAR coldfire (no cache)
 FF020000 - FF03FFFF : invalid (bus error) 
 FF040000 - FF04FFFF : MMU_BASE coldfire (no cache)
 FF050000 - FFEFFFFF : invalid (bus error) 
 FFF00000 - FFFFFFFF : FPGA FBCS1 - ATARI IDE - ATARI I/O (1MB - no cache) 
 

Compile MiNT 1.16.1 (obsolete)
==============================
MiNT need some changes for the Coldfire:

- Inside KERNELDEF (example for make deb):
++++++++++++++++++++++++++++++++++++++++++

ifeq ($(kernel),deb)
MINT = mintnp.prg
CPU  = 020-60
KERNELDEFS = -DDEBUG_INFO -DONLY030 -DMMU040 -DCPU040 -DNO_AKP_KEYBOARD -DNO_RAMFS -DNO_FAKE_SUPER -DCOLDFIRE
endif

- Inside time.c:
++++++++++++++++

init_time (void)
{
#ifdef COLDFIRE
	long value = 0;  // no MFP (it's possible to use Slice Timer 1 : 100 incr/uS) !!!
#else
	long value = _mfpregs->tbdr;
#endif

static void quick_synch (void)
{
	ulong current_ticks;
	long elapsed;
#ifdef COLDFIRE
	timerc = 0;  // no MFP (it's possible to use Slice Timer 1 : 100 incr/uS) !!!
#else
	timerc = _mfpregs->tbdr;
#endif

- Inside init.c:
++++++++++++++++

	if (falcontos)
	{
#ifdef COLDFIRE
		has_bconmap = 0;
#else
		bconmap2 = (BCONMAP2_T *) TRAP_Bconmap (-2);
		if (bconmap2->maptabsize == 1)
		{
			/* Falcon BIOS Bconmap is busted */
			bconmap2->maptabsize = 3;
		}
		has_bconmap = 1;
#endif
	}

#ifndef COLDFIRE
	r = FP_ALLOC(rootproc, &f);
	if (r) FATAL("Can't allocate fp!");
	
	r = do_open(&f, "u:/dev/modem1", O_RDWR, 0, NULL);
/.../
	r = do_open(&f, "u:/dev/midi", O_RDWR, 0, NULL);
	if (!r)
	{
		rootproc->p_fd->midiin = f;
		rootproc->p_fd->midiout = f;
		f->links++;

		((struct tty *) f->devinfo)->use_cnt++;
		((struct tty *) f->devinfo)->aux_cnt = 2;
		f->pos = 1;	/* flag for close to --aux_cnt */
	}
#endif

- Inside biosfs.c:
++++++++++++++++++

#ifndef COLDFIRE
	{ "modem1",	&bios_tdevice,	 6,       O_TTY, &aux_tty, NULL},
#ifndef MILAN/* these do not really work on Milan, so it is best to use the UART
	   XDD instead of this // rincewind */
	{ "modem2",	&bios_tdevice,	 7,       O_TTY, &sccb_tty, NULL},
	{ "serial1",	&bios_tdevice,	 8,       O_TTY, &ttmfp_tty, NULL},
	{ "serial2",	&bios_tdevice,	 9,       O_TTY, &scca_tty, NULL},
#endif
#endif

- Inside syscall_vectors.c:
+++++++++++++++++++++++++++

Func xbios_tab [XBIOS_MAX] =
{
        /* 0x000 */		NULL,
	/* 0x001 */		NULL,
	/* 0x002 */		NULL,
	/* 0x003 */		NULL,
	/* 0x004 */		NULL,
	/* 0x005 */		NULL, // sys_b_vsetscreen,
	/* 0x006 */		NULL,
	/* 0x007 */		NULL,
	/* 0x008 */		NULL,
	/* 0x009 */		NULL,
	/* 0x00a */		NULL,
	/* 0x00b */		NULL,
	/* 0x00c */		NULL, // sys_b_midiws,
	/* 0x00d */		NULL,
	/* 0x00e */		sys_b_uiorec,
	/* 0x00f */		sys_b_ursconf,
# ifndef NO_AKP_KEYBOARD
	/* 0x010 */	(Func)	sys_b_keytbl,
# else
	/* 0x010 */		NULL,
# endif
	/* 0x011 */		sys_b_random,
	/* 0x012 */		NULL,
	/* 0x013 */		NULL,
	/* 0x014 */		NULL,
	/* 0x015 */		sys_b_cursconf,
	/* 0x016 */		NULL, //(Func)	sys_b_settime,
	/* 0x017 */		NULL, // sys_b_gettime,
# ifndef NO_AKP_KEYBOARD
	/* 0x018 */	(Func)	sys_b_bioskeys,
# else
	/* 0x018 */		NULL,
# endif
	/* 0x019 */		NULL,
	/* 0x01a */		NULL,
	/* 0x01b */		NULL,
	/* 0x01c */		NULL,
	/* 0x01d */		NULL,
	/* 0x01e */		NULL,
	/* 0x01f */		NULL,
	/* 0x020 */		NULL, // sys_b_dosound,

- Inside arch/detect.S:
+++++++++++++++++++++++

_detect_cpu:

#ifdef COLDFIRE
	moveq	#60,d0
#else
/ ... /
#endif
	rts
	
_detect_fpu:
#ifdef COLDFIRE
	moveq	#0,d0
#else
/ ... /
#endif
	rts

_cache060:
/ ... /
#ifndef COLDFIRE	
	bcs.s	fls040
#endif

_cache060_i:
/ ... /
#ifndef COLDFIRE	
	bcs.s	fls040i
#endif

	
- Inside arch/syscall.S:
+++++++++++++++++++++++
	
_lineA0:
	movem.l	d2/a2,-(sp)		// save scratch registers
#ifdef COLDFIRE
	jsr 0xE09512                    // TOS404 (or trap #15 or use cookie 'A000' ! )
#else
	dc.w	0xa000			// call the line A initialization routine
#endif
	movem.l	(sp)+,d2/a2
	rts

- Inside k_exec.c:
++++++++++++++++++

static struct proc *
exec_region(struct proc *p, MEMREGION *mem, int thread)
{
	struct filedesc *fd = p->p_fd;
	BASEPAGE *b;
	int i;
	MEMREGION *m;

	TRACE(("exec_region: enter (PROC %lx, mem = %lx)", p, mem));
	assert(p && mem && fd);
	assert(p->p_cwd);
	assert(p->p_mem);

	b = (BASEPAGE *)mem->loc;
	
#ifdef COLDFIRE
	patch_memset_purec(b);
#endif

	/* flush cached versions of the text */
	cpush((void *) b->p_tbase, b->p_tlen);
	
- Inside a .S:
++++++++++++++

#ifdef COLDFIRE
_patch_memset_purec:

	lea -28(SP),SP
	movem.l D0-D2/A0-A2/A5,(SP)
	move.l 32(SP),A5                                    // BASEPAGE
	move.l 0xC(A5),D1                                   // p_tlen
	lsr.l #1,D1
	lea 256(A5),A0                                      // text
	lea memset_purec(PC),A1
.loop_search_memset:
		move.l (A0),D0
		cmp.l (A1),D0
		bne.s .next_search_memset
		addq.l #4,A1
		lea 4(A0),A2
		moveq #(12*4)-1,D2
.loop_search_memset_2:
			move.l (A2)+,D0
			cmp.l (A1)+,D0
			bne.s .bad_cmp_memset
		subq.l #1,D2
		bgt.s .loop_search_memset_2
		// patch for incompatible instructions
		lea 0x14(A0),A0                        // move.b D0,-(SP) move.w (SP)+,D2
		move.l #0x1400E18A,(A0)                // => move.b D0,D2 lsl.l #8,D2 
		bra.s .end_pexec
.bad_cmp_memset:
		lea memset_purec(PC),A1	
.next_search_memset:
		addq.l #2,A0
	subq.l #1,D1
	bgt.s .loop_search_memset
.end_pexec:
	movem.l (SP),D0-D2/A0-A2/A5
	lea 28(SP),SP
	rts
	
memset_purec:
	dc.l 0x2F08D1C1,0x24080802,0x00006708,0x53816500
	dc.l 0x00AC1100,0x1F00341F,0x14003002,0x48423400
	dc.l 0x2001E088,0xE4886778,0x48E75F3E,0x22022602
	dc.l 0x28022A02,0x2C022E02,0x22422442,0x26422842
	dc.l 0x2A422C42,0x48E07F7E,0x48E07F7E,0x48E07F7E
	dc.l 0x48E07F7E,0x48E07F7E,0x48E07F7E,0x48E07F7E
	dc.l 0x48E07F7E,0x48E07F7E,0x48E07F7E,0x48E07F7E
	dc.l 0x48E07F7E,0x48E07F7E,0x48E07F7E,0x48E07F7E
	dc.l 0x48E07F7E,0x48E07F7E,0x48E07F7E,0x48E07F7E
	dc.l 0x48E07F60,0x538066AC,0x4CDF7CFA,0xC27C03FF
	dc.l 0x3001E448,0x67085340,0x210251C8,0xFFFCC27C
	dc.l 0x00036708,0x53411102,0x51C9FFFC,0x205F4E75
#endif

- Inside mint/config.h:
+++++++++++++++++++++++

# define OLDTOSFS  // else the TFTP Ram-Disk is destroyed

